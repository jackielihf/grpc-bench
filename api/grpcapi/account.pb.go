// Code generated by protoc-gen-go.
// source: account.proto
// DO NOT EDIT!

/*
Package grpcapi is a generated protocol buffer package.

It is generated from these files:
	account.proto
	admin.proto
	client.proto
	common.proto
	fund_real.proto
	open_fund.proto
	system.proto

It has these top-level messages:
	OpenProjectReq
	OpenProjectResp
	AutoOpenProjectReq
	AutoOpenProjectResp
	CloseProjectReq
	CloseProjectResp
	QueryProjectReq
	Project
	ListProjectResp
	GetProjectResp
	CheckProjectResp
	QueryProjectYieldRateReq
	StatProjectAsset
	ListProjectYieldRateResp
	SupplyOpenFundStockReq
	SupplyOpenFundStockResp
	RegisterClientReq
	RegisterClientResp
	CloseClientReq
	CloseClientResp
	FrozenClientReq
	FrozenClientResp
	QueryClientReq
	Client
	GetClientResp
	AddFundAccountReq
	AddFundAccountResp
	QueryFundAccountReq
	FundAccount
	ListFundAccountResp
	BaseReq
	RespStatus
	PageInfo
	TradeHeader
	TransferReq
	TransferResp
	QueryAssigningReq
	GetAssigningResp
	QueryFundRealReq
	FundReal
	GetFundRealResp
	QueryFundJourReq
	FundJour
	ListFundJourResp
	OpenFundSubReq
	OpenFundApplyReq
	OpenFundRedeemReq
	OpenFundWithdrawReq
	OpenFundTransReq
	OpenFundEntrustResp
	OpenFundAdvSubReq
	OpenFundAdvApplyReq
	OpenFundAdvRedeemReq
	OpenFundAdvTransReq
	OpenFundAdvWithdrawReq
	QueryOFEntrustReq
	OFEntrust
	ListOFEntrustResp
	QueryOFStockReq
	OFStock
	ListOFStockResp
	QueryOFStockJourReq
	OFStockJour
	ListOFStockJourResp
	QuerySystemReq
	System
	SystemResp
	QueryPingReq
	PingResp
*/
package grpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 创建资产单元的消息
type OpenProjectReq struct {
	BaseReq       *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId      int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId int64    `protobuf:"varint,3,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	Name          string   `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DefaultFlag   int32    `protobuf:"varint,5,opt,name=defaultFlag" json:"defaultFlag,omitempty"`
	Remark        string   `protobuf:"bytes,6,opt,name=remark" json:"remark,omitempty"`
}

func (m *OpenProjectReq) Reset()                    { *m = OpenProjectReq{} }
func (m *OpenProjectReq) String() string            { return proto.CompactTextString(m) }
func (*OpenProjectReq) ProtoMessage()               {}
func (*OpenProjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *OpenProjectReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenProjectReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenProjectReq) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *OpenProjectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *OpenProjectReq) GetDefaultFlag() int32 {
	if m != nil {
		return m.DefaultFlag
	}
	return 0
}

func (m *OpenProjectReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 创建资产单元的返回消息
type OpenProjectResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ProjectId  int64       `protobuf:"varint,2,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *OpenProjectResp) Reset()                    { *m = OpenProjectResp{} }
func (m *OpenProjectResp) String() string            { return proto.CompactTextString(m) }
func (*OpenProjectResp) ProtoMessage()               {}
func (*OpenProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *OpenProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *OpenProjectResp) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 创建资产单元的增强的消息
type AutoOpenProjectReq struct {
	BaseReq         *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	RealClientType  string   `protobuf:"bytes,2,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId    string   `protobuf:"bytes,3,opt,name=realClientId" json:"realClientId,omitempty"`
	ClientName      string   `protobuf:"bytes,4,opt,name=clientName" json:"clientName,omitempty"`
	CertType        string   `protobuf:"bytes,5,opt,name=certType" json:"certType,omitempty"`
	CertId          string   `protobuf:"bytes,6,opt,name=certId" json:"certId,omitempty"`
	RealFundAccount string   `protobuf:"bytes,7,opt,name=realFundAccount" json:"realFundAccount,omitempty"`
	MoneyType       string   `protobuf:"bytes,8,opt,name=moneyType" json:"moneyType,omitempty"`
	Name            string   `protobuf:"bytes,9,opt,name=name" json:"name,omitempty"`
	Remark          string   `protobuf:"bytes,10,opt,name=remark" json:"remark,omitempty"`
}

func (m *AutoOpenProjectReq) Reset()                    { *m = AutoOpenProjectReq{} }
func (m *AutoOpenProjectReq) String() string            { return proto.CompactTextString(m) }
func (*AutoOpenProjectReq) ProtoMessage()               {}
func (*AutoOpenProjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AutoOpenProjectReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *AutoOpenProjectReq) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *AutoOpenProjectReq) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *AutoOpenProjectReq) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *AutoOpenProjectReq) GetCertType() string {
	if m != nil {
		return m.CertType
	}
	return ""
}

func (m *AutoOpenProjectReq) GetCertId() string {
	if m != nil {
		return m.CertId
	}
	return ""
}

func (m *AutoOpenProjectReq) GetRealFundAccount() string {
	if m != nil {
		return m.RealFundAccount
	}
	return ""
}

func (m *AutoOpenProjectReq) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

func (m *AutoOpenProjectReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AutoOpenProjectReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 创建资产单元的增强的返回消息
type AutoOpenProjectResp struct {
	RespStatus    *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ClientId      int64       `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId int64       `protobuf:"varint,3,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	ProjectId     int64       `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *AutoOpenProjectResp) Reset()                    { *m = AutoOpenProjectResp{} }
func (m *AutoOpenProjectResp) String() string            { return proto.CompactTextString(m) }
func (*AutoOpenProjectResp) ProtoMessage()               {}
func (*AutoOpenProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AutoOpenProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *AutoOpenProjectResp) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *AutoOpenProjectResp) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *AutoOpenProjectResp) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 注销资产单元的消息
type CloseProjectReq struct {
	BaseReq   *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId  int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId int64    `protobuf:"varint,3,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *CloseProjectReq) Reset()                    { *m = CloseProjectReq{} }
func (m *CloseProjectReq) String() string            { return proto.CompactTextString(m) }
func (*CloseProjectReq) ProtoMessage()               {}
func (*CloseProjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CloseProjectReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *CloseProjectReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CloseProjectReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 注销资产单元的响应消息
type CloseProjectResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ClientId   int64       `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId  int64       `protobuf:"varint,3,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *CloseProjectResp) Reset()                    { *m = CloseProjectResp{} }
func (m *CloseProjectResp) String() string            { return proto.CompactTextString(m) }
func (*CloseProjectResp) ProtoMessage()               {}
func (*CloseProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CloseProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *CloseProjectResp) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *CloseProjectResp) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 查询资产单元的消息
type QueryProjectReq struct {
	BaseReq   *BaseReq  `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	PageInfo  *PageInfo `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	ClientId  int64     `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId int64     `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *QueryProjectReq) Reset()                    { *m = QueryProjectReq{} }
func (m *QueryProjectReq) String() string            { return proto.CompactTextString(m) }
func (*QueryProjectReq) ProtoMessage()               {}
func (*QueryProjectReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *QueryProjectReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryProjectReq) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QueryProjectReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryProjectReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 资产单元 对象
type Project struct {
	Id                int64     `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ClientId          int64     `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId     int64     `protobuf:"varint,3,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	Name              string    `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	DefaultFlag       int32     `protobuf:"varint,5,opt,name=defaultFlag" json:"defaultFlag,omitempty"`
	AssetType         string    `protobuf:"bytes,6,opt,name=assetType" json:"assetType,omitempty"`
	Status            int32     `protobuf:"varint,7,opt,name=status" json:"status,omitempty"`
	Remark            string    `protobuf:"bytes,8,opt,name=remark" json:"remark,omitempty"`
	CreateAt          int64     `protobuf:"varint,9,opt,name=createAt" json:"createAt,omitempty"`
	ChangeAt          int64     `protobuf:"varint,10,opt,name=changeAt" json:"changeAt,omitempty"`
	Yield             float64   `protobuf:"fixed64,11,opt,name=yield" json:"yield,omitempty"`
	YieldRate         float64   `protobuf:"fixed64,12,opt,name=yieldRate" json:"yieldRate,omitempty"`
	HoldYield         float64   `protobuf:"fixed64,13,opt,name=holdYield" json:"holdYield,omitempty"`
	HoldYieldRate     float64   `protobuf:"fixed64,14,opt,name=holdYieldRate" json:"holdYieldRate,omitempty"`
	CuYield           float64   `protobuf:"fixed64,15,opt,name=cuYield" json:"cuYield,omitempty"`
	CuYieldRate       float64   `protobuf:"fixed64,16,opt,name=cuYieldRate" json:"cuYieldRate,omitempty"`
	EnableMarketValue float64   `protobuf:"fixed64,17,opt,name=enableMarketValue" json:"enableMarketValue,omitempty"`
	FrozenMarketValue float64   `protobuf:"fixed64,18,opt,name=frozenMarketValue" json:"frozenMarketValue,omitempty"`
	FundReal          *FundReal `protobuf:"bytes,19,opt,name=fundReal" json:"fundReal,omitempty"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Project) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Project) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Project) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetDefaultFlag() int32 {
	if m != nil {
		return m.DefaultFlag
	}
	return 0
}

func (m *Project) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *Project) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Project) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Project) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Project) GetChangeAt() int64 {
	if m != nil {
		return m.ChangeAt
	}
	return 0
}

func (m *Project) GetYield() float64 {
	if m != nil {
		return m.Yield
	}
	return 0
}

func (m *Project) GetYieldRate() float64 {
	if m != nil {
		return m.YieldRate
	}
	return 0
}

func (m *Project) GetHoldYield() float64 {
	if m != nil {
		return m.HoldYield
	}
	return 0
}

func (m *Project) GetHoldYieldRate() float64 {
	if m != nil {
		return m.HoldYieldRate
	}
	return 0
}

func (m *Project) GetCuYield() float64 {
	if m != nil {
		return m.CuYield
	}
	return 0
}

func (m *Project) GetCuYieldRate() float64 {
	if m != nil {
		return m.CuYieldRate
	}
	return 0
}

func (m *Project) GetEnableMarketValue() float64 {
	if m != nil {
		return m.EnableMarketValue
	}
	return 0
}

func (m *Project) GetFrozenMarketValue() float64 {
	if m != nil {
		return m.FrozenMarketValue
	}
	return 0
}

func (m *Project) GetFundReal() *FundReal {
	if m != nil {
		return m.FundReal
	}
	return nil
}

// 查询客户的资产单元列表的返回消息
type ListProjectResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Page       *PageInfo   `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	Data       []*Project  `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *ListProjectResp) Reset()                    { *m = ListProjectResp{} }
func (m *ListProjectResp) String() string            { return proto.CompactTextString(m) }
func (*ListProjectResp) ProtoMessage()               {}
func (*ListProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListProjectResp) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ListProjectResp) GetData() []*Project {
	if m != nil {
		return m.Data
	}
	return nil
}

// 查询客户的资产单元的返回消息
type GetProjectResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Data       *Project    `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetProjectResp) Reset()                    { *m = GetProjectResp{} }
func (m *GetProjectResp) String() string            { return proto.CompactTextString(m) }
func (*GetProjectResp) ProtoMessage()               {}
func (*GetProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *GetProjectResp) GetData() *Project {
	if m != nil {
		return m.Data
	}
	return nil
}

// 检查资产单元数据状态的返回消息
type CheckProjectResp struct {
	RespStatus     *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	FundRealStatus bool        `protobuf:"varint,2,opt,name=fundRealStatus" json:"fundRealStatus,omitempty"`
	StockStatus    bool        `protobuf:"varint,3,opt,name=stockStatus" json:"stockStatus,omitempty"`
}

func (m *CheckProjectResp) Reset()                    { *m = CheckProjectResp{} }
func (m *CheckProjectResp) String() string            { return proto.CompactTextString(m) }
func (*CheckProjectResp) ProtoMessage()               {}
func (*CheckProjectResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CheckProjectResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *CheckProjectResp) GetFundRealStatus() bool {
	if m != nil {
		return m.FundRealStatus
	}
	return false
}

func (m *CheckProjectResp) GetStockStatus() bool {
	if m != nil {
		return m.StockStatus
	}
	return false
}

// 查询资产单元的消息
type QueryProjectYieldRateReq struct {
	BaseReq   *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId  int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId int64    `protobuf:"varint,3,opt,name=projectId" json:"projectId,omitempty"`
	BeginDate int64    `protobuf:"varint,4,opt,name=beginDate" json:"beginDate,omitempty"`
	EndDate   int64    `protobuf:"varint,5,opt,name=endDate" json:"endDate,omitempty"`
}

func (m *QueryProjectYieldRateReq) Reset()                    { *m = QueryProjectYieldRateReq{} }
func (m *QueryProjectYieldRateReq) String() string            { return proto.CompactTextString(m) }
func (*QueryProjectYieldRateReq) ProtoMessage()               {}
func (*QueryProjectYieldRateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *QueryProjectYieldRateReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryProjectYieldRateReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryProjectYieldRateReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *QueryProjectYieldRateReq) GetBeginDate() int64 {
	if m != nil {
		return m.BeginDate
	}
	return 0
}

func (m *QueryProjectYieldRateReq) GetEndDate() int64 {
	if m != nil {
		return m.EndDate
	}
	return 0
}

// 资产单元资产概要 对象
type StatProjectAsset struct {
	ProjectId         int64   `protobuf:"varint,1,opt,name=projectId" json:"projectId,omitempty"`
	ClientId          int64   `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	InitDate          int64   `protobuf:"varint,3,opt,name=initDate" json:"initDate,omitempty"`
	EnableBalance     float64 `protobuf:"fixed64,4,opt,name=enableBalance" json:"enableBalance,omitempty"`
	FrozenBalance     float64 `protobuf:"fixed64,5,opt,name=frozenBalance" json:"frozenBalance,omitempty"`
	CorrectBalance    float64 `protobuf:"fixed64,6,opt,name=correctBalance" json:"correctBalance,omitempty"`
	DebitBalance      float64 `protobuf:"fixed64,7,opt,name=debitBalance" json:"debitBalance,omitempty"`
	Yield             float64 `protobuf:"fixed64,8,opt,name=yield" json:"yield,omitempty"`
	YieldRate         float64 `protobuf:"fixed64,9,opt,name=yieldRate" json:"yieldRate,omitempty"`
	HoldYield         float64 `protobuf:"fixed64,10,opt,name=holdYield" json:"holdYield,omitempty"`
	HoldYieldRate     float64 `protobuf:"fixed64,11,opt,name=holdYieldRate" json:"holdYieldRate,omitempty"`
	CuYield           float64 `protobuf:"fixed64,12,opt,name=cuYield" json:"cuYield,omitempty"`
	CuYieldRate       float64 `protobuf:"fixed64,13,opt,name=cuYieldRate" json:"cuYieldRate,omitempty"`
	EnableMarketValue float64 `protobuf:"fixed64,14,opt,name=enableMarketValue" json:"enableMarketValue,omitempty"`
	FrozenMarketValue float64 `protobuf:"fixed64,15,opt,name=frozenMarketValue" json:"frozenMarketValue,omitempty"`
	Remark            string  `protobuf:"bytes,16,opt,name=remark" json:"remark,omitempty"`
	CreateAt          int64   `protobuf:"varint,17,opt,name=createAt" json:"createAt,omitempty"`
	UpdateAt          int64   `protobuf:"varint,18,opt,name=updateAt" json:"updateAt,omitempty"`
}

func (m *StatProjectAsset) Reset()                    { *m = StatProjectAsset{} }
func (m *StatProjectAsset) String() string            { return proto.CompactTextString(m) }
func (*StatProjectAsset) ProtoMessage()               {}
func (*StatProjectAsset) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *StatProjectAsset) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *StatProjectAsset) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *StatProjectAsset) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

func (m *StatProjectAsset) GetEnableBalance() float64 {
	if m != nil {
		return m.EnableBalance
	}
	return 0
}

func (m *StatProjectAsset) GetFrozenBalance() float64 {
	if m != nil {
		return m.FrozenBalance
	}
	return 0
}

func (m *StatProjectAsset) GetCorrectBalance() float64 {
	if m != nil {
		return m.CorrectBalance
	}
	return 0
}

func (m *StatProjectAsset) GetDebitBalance() float64 {
	if m != nil {
		return m.DebitBalance
	}
	return 0
}

func (m *StatProjectAsset) GetYield() float64 {
	if m != nil {
		return m.Yield
	}
	return 0
}

func (m *StatProjectAsset) GetYieldRate() float64 {
	if m != nil {
		return m.YieldRate
	}
	return 0
}

func (m *StatProjectAsset) GetHoldYield() float64 {
	if m != nil {
		return m.HoldYield
	}
	return 0
}

func (m *StatProjectAsset) GetHoldYieldRate() float64 {
	if m != nil {
		return m.HoldYieldRate
	}
	return 0
}

func (m *StatProjectAsset) GetCuYield() float64 {
	if m != nil {
		return m.CuYield
	}
	return 0
}

func (m *StatProjectAsset) GetCuYieldRate() float64 {
	if m != nil {
		return m.CuYieldRate
	}
	return 0
}

func (m *StatProjectAsset) GetEnableMarketValue() float64 {
	if m != nil {
		return m.EnableMarketValue
	}
	return 0
}

func (m *StatProjectAsset) GetFrozenMarketValue() float64 {
	if m != nil {
		return m.FrozenMarketValue
	}
	return 0
}

func (m *StatProjectAsset) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *StatProjectAsset) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *StatProjectAsset) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

// 查询客户的历史收益率的返回消息
type ListProjectYieldRateResp struct {
	RespStatus *RespStatus         `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Data       []*StatProjectAsset `protobuf:"bytes,2,rep,name=data" json:"data,omitempty"`
}

func (m *ListProjectYieldRateResp) Reset()                    { *m = ListProjectYieldRateResp{} }
func (m *ListProjectYieldRateResp) String() string            { return proto.CompactTextString(m) }
func (*ListProjectYieldRateResp) ProtoMessage()               {}
func (*ListProjectYieldRateResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *ListProjectYieldRateResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListProjectYieldRateResp) GetData() []*StatProjectAsset {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*OpenProjectReq)(nil), "grpcapi.OpenProjectReq")
	proto.RegisterType((*OpenProjectResp)(nil), "grpcapi.OpenProjectResp")
	proto.RegisterType((*AutoOpenProjectReq)(nil), "grpcapi.AutoOpenProjectReq")
	proto.RegisterType((*AutoOpenProjectResp)(nil), "grpcapi.AutoOpenProjectResp")
	proto.RegisterType((*CloseProjectReq)(nil), "grpcapi.CloseProjectReq")
	proto.RegisterType((*CloseProjectResp)(nil), "grpcapi.CloseProjectResp")
	proto.RegisterType((*QueryProjectReq)(nil), "grpcapi.QueryProjectReq")
	proto.RegisterType((*Project)(nil), "grpcapi.Project")
	proto.RegisterType((*ListProjectResp)(nil), "grpcapi.ListProjectResp")
	proto.RegisterType((*GetProjectResp)(nil), "grpcapi.GetProjectResp")
	proto.RegisterType((*CheckProjectResp)(nil), "grpcapi.CheckProjectResp")
	proto.RegisterType((*QueryProjectYieldRateReq)(nil), "grpcapi.QueryProjectYieldRateReq")
	proto.RegisterType((*StatProjectAsset)(nil), "grpcapi.StatProjectAsset")
	proto.RegisterType((*ListProjectYieldRateResp)(nil), "grpcapi.ListProjectYieldRateResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AccountManager service

type AccountManagerClient interface {
	// 创建资产单元
	OpenProject(ctx context.Context, in *OpenProjectReq, opts ...grpc.CallOption) (*OpenProjectResp, error)
	// 创建资产单元（增强接口）： 自动注册客户、添加默认资金账户，最后创建资产单元
	AutoOpenProject(ctx context.Context, in *AutoOpenProjectReq, opts ...grpc.CallOption) (*AutoOpenProjectResp, error)
	// 注销资产单元
	CloseProject(ctx context.Context, in *CloseProjectReq, opts ...grpc.CallOption) (*CloseProjectResp, error)
	// 根据clientId, 查询客户的资产单元列表
	ListProjectByClientId(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*ListProjectResp, error)
	// 根据Id, 查询客户的资产单元
	GetProjectById(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*GetProjectResp, error)
	// 检查资产单元的数据状态（资金、持仓与柜台的资金、持仓进行对比）
	CheckProjectDataStatus(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*CheckProjectResp, error)
	// 查询客户的历史收益率
	ListProjectYieldRate(ctx context.Context, in *QueryProjectYieldRateReq, opts ...grpc.CallOption) (*ListProjectYieldRateResp, error)
}

type accountManagerClient struct {
	cc *grpc.ClientConn
}

func NewAccountManagerClient(cc *grpc.ClientConn) AccountManagerClient {
	return &accountManagerClient{cc}
}

func (c *accountManagerClient) OpenProject(ctx context.Context, in *OpenProjectReq, opts ...grpc.CallOption) (*OpenProjectResp, error) {
	out := new(OpenProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/OpenProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) AutoOpenProject(ctx context.Context, in *AutoOpenProjectReq, opts ...grpc.CallOption) (*AutoOpenProjectResp, error) {
	out := new(AutoOpenProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/AutoOpenProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) CloseProject(ctx context.Context, in *CloseProjectReq, opts ...grpc.CallOption) (*CloseProjectResp, error) {
	out := new(CloseProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/CloseProject", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ListProjectByClientId(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*ListProjectResp, error) {
	out := new(ListProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/ListProjectByClientId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) GetProjectById(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*GetProjectResp, error) {
	out := new(GetProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/GetProjectById", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) CheckProjectDataStatus(ctx context.Context, in *QueryProjectReq, opts ...grpc.CallOption) (*CheckProjectResp, error) {
	out := new(CheckProjectResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/CheckProjectDataStatus", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountManagerClient) ListProjectYieldRate(ctx context.Context, in *QueryProjectYieldRateReq, opts ...grpc.CallOption) (*ListProjectYieldRateResp, error) {
	out := new(ListProjectYieldRateResp)
	err := grpc.Invoke(ctx, "/grpcapi.AccountManager/ListProjectYieldRate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AccountManager service

type AccountManagerServer interface {
	// 创建资产单元
	OpenProject(context.Context, *OpenProjectReq) (*OpenProjectResp, error)
	// 创建资产单元（增强接口）： 自动注册客户、添加默认资金账户，最后创建资产单元
	AutoOpenProject(context.Context, *AutoOpenProjectReq) (*AutoOpenProjectResp, error)
	// 注销资产单元
	CloseProject(context.Context, *CloseProjectReq) (*CloseProjectResp, error)
	// 根据clientId, 查询客户的资产单元列表
	ListProjectByClientId(context.Context, *QueryProjectReq) (*ListProjectResp, error)
	// 根据Id, 查询客户的资产单元
	GetProjectById(context.Context, *QueryProjectReq) (*GetProjectResp, error)
	// 检查资产单元的数据状态（资金、持仓与柜台的资金、持仓进行对比）
	CheckProjectDataStatus(context.Context, *QueryProjectReq) (*CheckProjectResp, error)
	// 查询客户的历史收益率
	ListProjectYieldRate(context.Context, *QueryProjectYieldRateReq) (*ListProjectYieldRateResp, error)
}

func RegisterAccountManagerServer(s *grpc.Server, srv AccountManagerServer) {
	s.RegisterService(&_AccountManager_serviceDesc, srv)
}

func _AccountManager_OpenProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).OpenProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/OpenProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).OpenProject(ctx, req.(*OpenProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_AutoOpenProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutoOpenProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).AutoOpenProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/AutoOpenProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).AutoOpenProject(ctx, req.(*AutoOpenProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_CloseProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).CloseProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/CloseProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).CloseProject(ctx, req.(*CloseProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ListProjectByClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListProjectByClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/ListProjectByClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListProjectByClientId(ctx, req.(*QueryProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_GetProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).GetProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/GetProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).GetProjectById(ctx, req.(*QueryProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_CheckProjectDataStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).CheckProjectDataStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/CheckProjectDataStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).CheckProjectDataStatus(ctx, req.(*QueryProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountManager_ListProjectYieldRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectYieldRateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountManagerServer).ListProjectYieldRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.AccountManager/ListProjectYieldRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountManagerServer).ListProjectYieldRate(ctx, req.(*QueryProjectYieldRateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _AccountManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.AccountManager",
	HandlerType: (*AccountManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenProject",
			Handler:    _AccountManager_OpenProject_Handler,
		},
		{
			MethodName: "AutoOpenProject",
			Handler:    _AccountManager_AutoOpenProject_Handler,
		},
		{
			MethodName: "CloseProject",
			Handler:    _AccountManager_CloseProject_Handler,
		},
		{
			MethodName: "ListProjectByClientId",
			Handler:    _AccountManager_ListProjectByClientId_Handler,
		},
		{
			MethodName: "GetProjectById",
			Handler:    _AccountManager_GetProjectById_Handler,
		},
		{
			MethodName: "CheckProjectDataStatus",
			Handler:    _AccountManager_CheckProjectDataStatus_Handler,
		},
		{
			MethodName: "ListProjectYieldRate",
			Handler:    _AccountManager_ListProjectYieldRate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account.proto",
}

func init() { proto.RegisterFile("account.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1179 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x57, 0xcb, 0x6e, 0x23, 0x45,
	0x17, 0x56, 0xfb, 0x12, 0xdb, 0xc7, 0x89, 0xed, 0x54, 0x92, 0x49, 0xc7, 0x93, 0xff, 0x97, 0xa7,
	0x35, 0x8c, 0xac, 0x11, 0xe3, 0x48, 0x99, 0x1d, 0xbb, 0x64, 0x46, 0x41, 0x91, 0x18, 0x18, 0x9a,
	0x8b, 0x04, 0x0b, 0x50, 0xb9, 0xbb, 0xe2, 0x34, 0x6e, 0x77, 0xf7, 0x74, 0x97, 0x41, 0x66, 0x81,
	0x04, 0x6f, 0x80, 0xe6, 0x1d, 0x58, 0xf0, 0x04, 0x3c, 0x04, 0x3b, 0x10, 0x0b, 0x56, 0x2c, 0x78,
	0x10, 0x54, 0xa7, 0xaa, 0xab, 0x2f, 0x8e, 0x3d, 0x10, 0x6b, 0x60, 0xe7, 0x73, 0xce, 0xd7, 0xf5,
	0x55, 0x9d, 0xcb, 0x57, 0x65, 0xd8, 0xa1, 0x8e, 0x13, 0xce, 0x03, 0x3e, 0x8a, 0xe2, 0x90, 0x87,
	0xa4, 0x31, 0x89, 0x23, 0x87, 0x46, 0x5e, 0xff, 0x78, 0x12, 0x86, 0x13, 0x9f, 0x9d, 0xd0, 0xc8,
	0x3b, 0xa1, 0x41, 0x10, 0x72, 0xca, 0xbd, 0x30, 0x48, 0x24, 0xac, 0xbf, 0xed, 0x84, 0xb3, 0x59,
	0x18, 0x28, 0xab, 0x7b, 0x35, 0x0f, 0xdc, 0xcf, 0x63, 0x46, 0x7d, 0xe9, 0xb0, 0x7e, 0x36, 0xa0,
	0xf3, 0x5e, 0xc4, 0x82, 0xe7, 0x71, 0xf8, 0x05, 0x73, 0xb8, 0xcd, 0x5e, 0x90, 0x87, 0xd0, 0x18,
	0xd3, 0x84, 0xd9, 0xec, 0x85, 0x69, 0x0c, 0x8c, 0x61, 0xfb, 0xb4, 0x37, 0x52, 0x54, 0xa3, 0x73,
	0xe9, 0xb7, 0x53, 0x00, 0xe9, 0x43, 0xd3, 0xf1, 0x3d, 0x16, 0xf0, 0x4b, 0xd7, 0xac, 0x0c, 0x8c,
	0x61, 0xd5, 0xd6, 0x36, 0xb9, 0x0f, 0x3b, 0x82, 0xed, 0x4c, 0xee, 0xfa, 0xd2, 0x35, 0xab, 0x08,
	0x28, 0x3a, 0x09, 0x81, 0x5a, 0x40, 0x67, 0xcc, 0xac, 0x0d, 0x8c, 0x61, 0xcb, 0xc6, 0xdf, 0x64,
	0x00, 0x6d, 0x97, 0x5d, 0xd1, 0xb9, 0xcf, 0x2f, 0x7c, 0x3a, 0x31, 0xeb, 0x03, 0x63, 0x58, 0xb7,
	0xf3, 0x2e, 0x72, 0x07, 0xb6, 0x62, 0x36, 0xa3, 0xf1, 0xd4, 0xdc, 0xc2, 0xef, 0x94, 0x65, 0xb9,
	0xd0, 0x2d, 0x9c, 0x26, 0x89, 0xc8, 0x63, 0x80, 0x98, 0x25, 0xd1, 0x07, 0x9c, 0xf2, 0x79, 0xa2,
	0x4e, 0xb4, 0xa7, 0x4f, 0x64, 0xeb, 0x90, 0x9d, 0x83, 0x91, 0x63, 0x68, 0x45, 0x72, 0x0d, 0x7d,
	0xb0, 0xcc, 0x61, 0xfd, 0x5a, 0x01, 0x72, 0x36, 0xe7, 0xe1, 0x06, 0x89, 0x7b, 0x00, 0x1d, 0x51,
	0x85, 0x27, 0x98, 0xac, 0x0f, 0x17, 0x11, 0x43, 0x96, 0x96, 0x5d, 0xf2, 0x12, 0x0b, 0xb6, 0x33,
	0x8f, 0xca, 0x61, 0xcb, 0x2e, 0xf8, 0xc8, 0xff, 0x01, 0x64, 0xd2, 0xdf, 0xcd, 0x12, 0x99, 0xf3,
	0x60, 0x91, 0x58, 0x2c, 0x59, 0xea, 0x18, 0xd5, 0xb6, 0x48, 0xa4, 0xf8, 0x7d, 0xe9, 0xa6, 0x89,
	0x94, 0x16, 0x19, 0x42, 0x57, 0x70, 0x5c, 0x64, 0xb5, 0x32, 0x1b, 0x08, 0x28, 0xbb, 0x45, 0xaa,
	0x66, 0x61, 0xc0, 0x16, 0xb8, 0x7c, 0x13, 0x31, 0x99, 0x43, 0x97, 0xb7, 0x95, 0x2b, 0x6f, 0x56,
	0x3c, 0x28, 0x14, 0xef, 0x47, 0x03, 0xf6, 0x96, 0xd2, 0x7a, 0xdb, 0x0a, 0x6e, 0xde, 0x99, 0x85,
	0x1e, 0xa8, 0x95, 0x7b, 0xe0, 0x2b, 0xe8, 0x3e, 0xf1, 0xc3, 0x84, 0xbd, 0x86, 0xc1, 0x29, 0x10,
	0x57, 0xcb, 0xc4, 0xdf, 0x1a, 0xd0, 0x2b, 0x32, 0xbf, 0x8e, 0x14, 0xad, 0xdf, 0xc3, 0x0f, 0x06,
	0x74, 0xdf, 0x9f, 0xb3, 0x78, 0x71, 0xcb, 0xd3, 0x3f, 0x82, 0x66, 0x44, 0x27, 0xec, 0x32, 0xb8,
	0x0a, 0x91, 0xb9, 0x7d, 0xba, 0xab, 0xc1, 0xcf, 0x55, 0xc0, 0xd6, 0x90, 0xc2, 0x46, 0xab, 0xeb,
	0x36, 0xba, 0x54, 0xa5, 0xdf, 0x6a, 0xd0, 0x50, 0x7b, 0x24, 0x1d, 0xa8, 0x78, 0x2e, 0xee, 0xad,
	0x6a, 0x57, 0x3c, 0xf7, 0x3f, 0xd3, 0xae, 0x63, 0x68, 0xd1, 0x24, 0x61, 0x72, 0x1e, 0xe5, 0xd4,
	0x65, 0x0e, 0x31, 0x1c, 0x89, 0xac, 0x62, 0x03, 0x3f, 0x55, 0x56, 0x6e, 0x68, 0x9a, 0xf9, 0xa1,
	0xc1, 0x53, 0xc4, 0x8c, 0x72, 0x76, 0xc6, 0x71, 0xc8, 0xc4, 0x29, 0x94, 0x8d, 0xb1, 0x6b, 0x1a,
	0x4c, 0x44, 0x0c, 0x54, 0x4c, 0xd9, 0x64, 0x1f, 0xea, 0x0b, 0x8f, 0xf9, 0xae, 0xd9, 0x1e, 0x18,
	0x43, 0xc3, 0x96, 0x86, 0xd8, 0x1b, 0xfe, 0xb0, 0x29, 0x67, 0xe6, 0x36, 0x46, 0x32, 0x87, 0x88,
	0x5e, 0x87, 0xbe, 0xfb, 0x09, 0x7e, 0xb7, 0x23, 0xa3, 0xda, 0x21, 0x72, 0xa6, 0x0d, 0xfc, 0xbe,
	0x83, 0x88, 0xa2, 0x93, 0x98, 0xd0, 0x70, 0xe6, 0x72, 0x85, 0x2e, 0xc6, 0x53, 0x53, 0x64, 0x4e,
	0xfd, 0xc4, 0xaf, 0x7b, 0x18, 0xcd, 0xbb, 0xc8, 0x9b, 0xb0, 0xcb, 0x02, 0x3a, 0xf6, 0xd9, 0x33,
	0x1a, 0x4f, 0x19, 0xff, 0x98, 0xfa, 0x73, 0x66, 0xee, 0x22, 0x6e, 0x39, 0x20, 0xd0, 0x57, 0x71,
	0xf8, 0x35, 0x0b, 0xf2, 0x68, 0x22, 0xd1, 0x4b, 0x01, 0xd1, 0x92, 0xa2, 0xb8, 0x36, 0xa3, 0xbe,
	0xb9, 0x57, 0x6a, 0xc9, 0x0b, 0x15, 0xb0, 0x35, 0xc4, 0x7a, 0x69, 0x40, 0xf7, 0x1d, 0x2f, 0xe1,
	0x1b, 0x0f, 0xe1, 0x1b, 0x50, 0x13, 0x7d, 0xbe, 0x7a, 0x0c, 0x30, 0x4c, 0xee, 0x43, 0xcd, 0xa5,
	0x9c, 0x9a, 0xd5, 0x41, 0xb5, 0x30, 0x5a, 0x29, 0x3f, 0x46, 0xad, 0x29, 0x74, 0xde, 0x66, 0x9b,
	0xef, 0x29, 0x25, 0xab, 0x94, 0xe6, 0xb8, 0x48, 0xf6, 0xbd, 0x10, 0xa2, 0x6b, 0xe6, 0x4c, 0x37,
	0xe6, 0x7b, 0x00, 0x9d, 0x34, 0xb1, 0xea, 0x43, 0xc1, 0xdc, 0xb4, 0x4b, 0x5e, 0xd1, 0x21, 0x09,
	0x0f, 0x9d, 0xa9, 0x02, 0x55, 0x11, 0x94, 0x77, 0x59, 0x3f, 0x19, 0x60, 0xe6, 0x85, 0x49, 0xf7,
	0xce, 0xbf, 0xa6, 0xcf, 0x22, 0x3a, 0x66, 0x13, 0x2f, 0x78, 0x2a, 0x9a, 0x58, 0x09, 0x92, 0x76,
	0x88, 0xf6, 0x67, 0x81, 0x8b, 0xb1, 0x3a, 0xc6, 0x52, 0xd3, 0xfa, 0xa3, 0x06, 0x3d, 0x71, 0x0a,
	0xb5, 0xf3, 0x33, 0xa1, 0x08, 0x45, 0x2a, 0xa3, 0x4c, 0xb5, 0x6e, 0x93, 0x7d, 0x68, 0x7a, 0x81,
	0xc7, 0x91, 0x49, 0x69, 0x66, 0x6a, 0x8b, 0x49, 0x95, 0xe3, 0x72, 0x4e, 0x7d, 0x1a, 0x38, 0x72,
	0x9b, 0x86, 0x5d, 0x74, 0xa2, 0x06, 0xe2, 0x98, 0xa4, 0xa8, 0xba, 0x44, 0x15, 0x9c, 0xa2, 0x76,
	0x4e, 0x18, 0xc7, 0xcc, 0xe1, 0x29, 0x6c, 0x0b, 0x61, 0x25, 0xaf, 0x78, 0xc8, 0xb8, 0x6c, 0xec,
	0x69, 0x54, 0x03, 0x51, 0x05, 0x5f, 0xa6, 0x49, 0xcd, 0x95, 0x9a, 0xd4, 0x5a, 0xab, 0x49, 0xf0,
	0x4a, 0x4d, 0x6a, 0xbf, 0x42, 0x93, 0xb6, 0xd7, 0x6a, 0xd2, 0xce, 0xdf, 0xd4, 0xa4, 0xce, 0x3f,
	0xd2, 0xa4, 0xee, 0x2a, 0x4d, 0xca, 0x34, 0xbf, 0xb7, 0x52, 0xf3, 0x77, 0x97, 0x35, 0x7f, 0x1e,
	0xb9, 0x32, 0x46, 0x64, 0x2c, 0xb5, 0xad, 0x6f, 0xc0, 0xcc, 0x69, 0x56, 0x6e, 0x36, 0x6e, 0x3b,
	0xb8, 0x8f, 0xb4, 0x50, 0x08, 0x55, 0x3a, 0xd2, 0xf0, 0x72, 0x1f, 0x4b, 0xc5, 0x38, 0xfd, 0xbd,
	0x0e, 0x1d, 0x75, 0x7b, 0x3e, 0xa3, 0x01, 0x9d, 0xb0, 0x98, 0x7c, 0x0a, 0xed, 0xdc, 0x73, 0x8f,
	0x1c, 0xea, 0x25, 0x8a, 0x6f, 0xeb, 0xbe, 0x79, 0x73, 0x20, 0x89, 0x2c, 0xf3, 0xbb, 0x5f, 0xfe,
	0x7c, 0x59, 0x21, 0xd6, 0xce, 0x89, 0x1a, 0x8c, 0x93, 0x30, 0x62, 0xc1, 0x5b, 0xc6, 0x43, 0x32,
	0x85, 0x6e, 0xe9, 0x39, 0x49, 0xee, 0xea, 0x65, 0x96, 0xdf, 0xef, 0xfd, 0xe3, 0xd5, 0xc1, 0x24,
	0xb2, 0xfe, 0x87, 0x3c, 0x87, 0x16, 0x29, 0xf0, 0x9c, 0xd0, 0x39, 0x0f, 0x05, 0xd9, 0x67, 0xb0,
	0x9d, 0x7f, 0x95, 0x91, 0x6c, 0xc3, 0xa5, 0x67, 0x62, 0xff, 0x68, 0x45, 0x24, 0x89, 0xac, 0x23,
	0xe4, 0xd8, 0xeb, 0x77, 0x34, 0x87, 0x23, 0x20, 0x62, 0xfd, 0x31, 0x1c, 0xe4, 0x6a, 0x77, 0xbe,
	0xd0, 0xaf, 0xff, 0x8c, 0xa8, 0xf4, 0x22, 0xcb, 0xe5, 0xac, 0x74, 0x53, 0x59, 0x07, 0xc8, 0xd3,
	0x25, 0x59, 0xce, 0x7c, 0x2f, 0xe1, 0xe4, 0xa3, 0xfc, 0xf5, 0x71, 0xbe, 0x58, 0xbb, 0x78, 0x56,
	0xa9, 0xe2, 0x8d, 0x63, 0xf5, 0x70, 0x6d, 0x20, 0xcd, 0x74, 0x6d, 0xe2, 0xc1, 0x9d, 0xfc, 0x3d,
	0xf1, 0x94, 0x72, 0xaa, 0xfa, 0x67, 0xf5, 0xf2, 0xb9, 0x24, 0x95, 0xae, 0x18, 0xab, 0x8f, 0x04,
	0xfb, 0x24, 0x2b, 0x84, 0x23, 0x20, 0xa2, 0xc3, 0xc8, 0x02, 0xf6, 0x6f, 0xea, 0x70, 0x72, 0xef,
	0x46, 0xa2, 0xfc, 0xed, 0xd0, 0xbf, 0x77, 0x53, 0xb6, 0x0a, 0x33, 0x62, 0xdd, 0x45, 0xe6, 0x03,
	0xb2, 0xa7, 0x99, 0x51, 0x87, 0x30, 0x79, 0xe7, 0x87, 0x70, 0xe0, 0x84, 0xb3, 0xd1, 0xe4, 0x6a,
	0xf4, 0x25, 0x1d, 0x89, 0x65, 0xd4, 0x72, 0xe3, 0x2d, 0xfc, 0xa7, 0xfd, 0xf8, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x06, 0x7b, 0x92, 0xf7, 0xc0, 0x0f, 0x00, 0x00,
}
