// Code generated by protoc-gen-go.
// source: client.proto
// DO NOT EDIT!

package grpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 注册客户消息
type RegisterClientReq struct {
	BaseReq        *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	RealClientType string   `protobuf:"bytes,2,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId   string   `protobuf:"bytes,3,opt,name=realClientId" json:"realClientId,omitempty"`
	ClientName     string   `protobuf:"bytes,4,opt,name=clientName" json:"clientName,omitempty"`
	CertType       string   `protobuf:"bytes,5,opt,name=certType" json:"certType,omitempty"`
	CertId         string   `protobuf:"bytes,6,opt,name=certId" json:"certId,omitempty"`
	Remark         string   `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
}

func (m *RegisterClientReq) Reset()                    { *m = RegisterClientReq{} }
func (m *RegisterClientReq) String() string            { return proto.CompactTextString(m) }
func (*RegisterClientReq) ProtoMessage()               {}
func (*RegisterClientReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *RegisterClientReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *RegisterClientReq) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *RegisterClientReq) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *RegisterClientReq) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *RegisterClientReq) GetCertType() string {
	if m != nil {
		return m.CertType
	}
	return ""
}

func (m *RegisterClientReq) GetCertId() string {
	if m != nil {
		return m.CertId
	}
	return ""
}

func (m *RegisterClientReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 注册客户的返回消息
type RegisterClientResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ClientId   int64       `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *RegisterClientResp) Reset()                    { *m = RegisterClientResp{} }
func (m *RegisterClientResp) String() string            { return proto.CompactTextString(m) }
func (*RegisterClientResp) ProtoMessage()               {}
func (*RegisterClientResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *RegisterClientResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *RegisterClientResp) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// 注销客户的消息
type CloseClientReq struct {
	BaseReq  *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *CloseClientReq) Reset()                    { *m = CloseClientReq{} }
func (m *CloseClientReq) String() string            { return proto.CompactTextString(m) }
func (*CloseClientReq) ProtoMessage()               {}
func (*CloseClientReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *CloseClientReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *CloseClientReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// 注销客户的返回消息
type CloseClientResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ClientId   int64       `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *CloseClientResp) Reset()                    { *m = CloseClientResp{} }
func (m *CloseClientResp) String() string            { return proto.CompactTextString(m) }
func (*CloseClientResp) ProtoMessage()               {}
func (*CloseClientResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *CloseClientResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *CloseClientResp) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// 冻结客户的消息
type FrozenClientReq struct {
	BaseReq  *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *FrozenClientReq) Reset()                    { *m = FrozenClientReq{} }
func (m *FrozenClientReq) String() string            { return proto.CompactTextString(m) }
func (*FrozenClientReq) ProtoMessage()               {}
func (*FrozenClientReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *FrozenClientReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *FrozenClientReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// 冻结客户的返回消息
type FrozenClientResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	ClientId   int64       `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *FrozenClientResp) Reset()                    { *m = FrozenClientResp{} }
func (m *FrozenClientResp) String() string            { return proto.CompactTextString(m) }
func (*FrozenClientResp) ProtoMessage()               {}
func (*FrozenClientResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *FrozenClientResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *FrozenClientResp) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// 查询客户的消息
type QueryClientReq struct {
	BaseReq        *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	ClientId       int64    `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	RealClientType string   `protobuf:"bytes,3,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId   string   `protobuf:"bytes,4,opt,name=realClientId" json:"realClientId,omitempty"`
	CertType       string   `protobuf:"bytes,5,opt,name=certType" json:"certType,omitempty"`
	CertId         string   `protobuf:"bytes,6,opt,name=certId" json:"certId,omitempty"`
}

func (m *QueryClientReq) Reset()                    { *m = QueryClientReq{} }
func (m *QueryClientReq) String() string            { return proto.CompactTextString(m) }
func (*QueryClientReq) ProtoMessage()               {}
func (*QueryClientReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *QueryClientReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryClientReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryClientReq) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *QueryClientReq) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *QueryClientReq) GetCertType() string {
	if m != nil {
		return m.CertType
	}
	return ""
}

func (m *QueryClientReq) GetCertId() string {
	if m != nil {
		return m.CertId
	}
	return ""
}

// 客户 实体
type Client struct {
	Id             int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	ClientName     string `protobuf:"bytes,2,opt,name=clientName" json:"clientName,omitempty"`
	FullName       string `protobuf:"bytes,3,opt,name=fullName" json:"fullName,omitempty"`
	CertType       string `protobuf:"bytes,4,opt,name=certType" json:"certType,omitempty"`
	CertId         string `protobuf:"bytes,5,opt,name=certId" json:"certId,omitempty"`
	Status         int32  `protobuf:"varint,6,opt,name=status" json:"status,omitempty"`
	Remark         string `protobuf:"bytes,7,opt,name=remark" json:"remark,omitempty"`
	BrokerId       string `protobuf:"bytes,8,opt,name=brokerId" json:"brokerId,omitempty"`
	BrokerOrg      string `protobuf:"bytes,9,opt,name=brokerOrg" json:"brokerOrg,omitempty"`
	RealClientType string `protobuf:"bytes,10,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId   string `protobuf:"bytes,11,opt,name=realClientId" json:"realClientId,omitempty"`
	CreateAt       int64  `protobuf:"varint,12,opt,name=createAt" json:"createAt,omitempty"`
	ChangeAt       int64  `protobuf:"varint,13,opt,name=changeAt" json:"changeAt,omitempty"`
}

func (m *Client) Reset()                    { *m = Client{} }
func (m *Client) String() string            { return proto.CompactTextString(m) }
func (*Client) ProtoMessage()               {}
func (*Client) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{7} }

func (m *Client) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Client) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *Client) GetFullName() string {
	if m != nil {
		return m.FullName
	}
	return ""
}

func (m *Client) GetCertType() string {
	if m != nil {
		return m.CertType
	}
	return ""
}

func (m *Client) GetCertId() string {
	if m != nil {
		return m.CertId
	}
	return ""
}

func (m *Client) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Client) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Client) GetBrokerId() string {
	if m != nil {
		return m.BrokerId
	}
	return ""
}

func (m *Client) GetBrokerOrg() string {
	if m != nil {
		return m.BrokerOrg
	}
	return ""
}

func (m *Client) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *Client) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *Client) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *Client) GetChangeAt() int64 {
	if m != nil {
		return m.ChangeAt
	}
	return 0
}

type GetClientResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Data       *Client     `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *GetClientResp) Reset()                    { *m = GetClientResp{} }
func (m *GetClientResp) String() string            { return proto.CompactTextString(m) }
func (*GetClientResp) ProtoMessage()               {}
func (*GetClientResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{8} }

func (m *GetClientResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *GetClientResp) GetData() *Client {
	if m != nil {
		return m.Data
	}
	return nil
}

// 添加资金账号的请求消息
type AddFundAccountReq struct {
	BaseReq         *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	Name            string   `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Remark          string   `protobuf:"bytes,3,opt,name=remark" json:"remark,omitempty"`
	RealFundAccount string   `protobuf:"bytes,4,opt,name=realFundAccount" json:"realFundAccount,omitempty"`
	RealClientType  string   `protobuf:"bytes,5,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId    string   `protobuf:"bytes,6,opt,name=realClientId" json:"realClientId,omitempty"`
	MoneyType       string   `protobuf:"bytes,7,opt,name=moneyType" json:"moneyType,omitempty"`
}

func (m *AddFundAccountReq) Reset()                    { *m = AddFundAccountReq{} }
func (m *AddFundAccountReq) String() string            { return proto.CompactTextString(m) }
func (*AddFundAccountReq) ProtoMessage()               {}
func (*AddFundAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{9} }

func (m *AddFundAccountReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *AddFundAccountReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AddFundAccountReq) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *AddFundAccountReq) GetRealFundAccount() string {
	if m != nil {
		return m.RealFundAccount
	}
	return ""
}

func (m *AddFundAccountReq) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *AddFundAccountReq) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *AddFundAccountReq) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

// 添加资金账号的响应消息
type AddFundAccountResp struct {
	RespStatus    *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	FundAccountId int64       `protobuf:"varint,2,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
}

func (m *AddFundAccountResp) Reset()                    { *m = AddFundAccountResp{} }
func (m *AddFundAccountResp) String() string            { return proto.CompactTextString(m) }
func (*AddFundAccountResp) ProtoMessage()               {}
func (*AddFundAccountResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{10} }

func (m *AddFundAccountResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *AddFundAccountResp) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

// 查询资金账号的消息
type QueryFundAccountReq struct {
	BaseReq        *BaseReq  `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	PageInfo       *PageInfo `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	ClientId       int64     `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	RealClientType string    `protobuf:"bytes,4,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId   string    `protobuf:"bytes,5,opt,name=realClientId" json:"realClientId,omitempty"`
	ProjectId      int64     `protobuf:"varint,6,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *QueryFundAccountReq) Reset()                    { *m = QueryFundAccountReq{} }
func (m *QueryFundAccountReq) String() string            { return proto.CompactTextString(m) }
func (*QueryFundAccountReq) ProtoMessage()               {}
func (*QueryFundAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{11} }

func (m *QueryFundAccountReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryFundAccountReq) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QueryFundAccountReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryFundAccountReq) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *QueryFundAccountReq) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *QueryFundAccountReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 资金账号
type FundAccount struct {
	Id              int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	AssetType       string `protobuf:"bytes,3,opt,name=assetType" json:"assetType,omitempty"`
	MoneyType       string `protobuf:"bytes,4,opt,name=moneyType" json:"moneyType,omitempty"`
	Status          int32  `protobuf:"varint,5,opt,name=status" json:"status,omitempty"`
	TradeMode       int32  `protobuf:"varint,6,opt,name=tradeMode" json:"tradeMode,omitempty"`
	SettleMode      int32  `protobuf:"varint,7,opt,name=settleMode" json:"settleMode,omitempty"`
	Remark          string `protobuf:"bytes,8,opt,name=remark" json:"remark,omitempty"`
	RealFundAccount string `protobuf:"bytes,9,opt,name=realFundAccount" json:"realFundAccount,omitempty"`
	RealClientType  string `protobuf:"bytes,10,opt,name=realClientType" json:"realClientType,omitempty"`
	RealClientId    string `protobuf:"bytes,11,opt,name=realClientId" json:"realClientId,omitempty"`
	ClientName      string `protobuf:"bytes,12,opt,name=clientName" json:"clientName,omitempty"`
	CertType        string `protobuf:"bytes,13,opt,name=certType" json:"certType,omitempty"`
	CertId          string `protobuf:"bytes,14,opt,name=certId" json:"certId,omitempty"`
	OpenAt          int64  `protobuf:"varint,15,opt,name=openAt" json:"openAt,omitempty"`
	CreateAt        int64  `protobuf:"varint,16,opt,name=createAt" json:"createAt,omitempty"`
	ChangeAt        int64  `protobuf:"varint,17,opt,name=changeAt" json:"changeAt,omitempty"`
}

func (m *FundAccount) Reset()                    { *m = FundAccount{} }
func (m *FundAccount) String() string            { return proto.CompactTextString(m) }
func (*FundAccount) ProtoMessage()               {}
func (*FundAccount) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{12} }

func (m *FundAccount) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FundAccount) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FundAccount) GetAssetType() string {
	if m != nil {
		return m.AssetType
	}
	return ""
}

func (m *FundAccount) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

func (m *FundAccount) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FundAccount) GetTradeMode() int32 {
	if m != nil {
		return m.TradeMode
	}
	return 0
}

func (m *FundAccount) GetSettleMode() int32 {
	if m != nil {
		return m.SettleMode
	}
	return 0
}

func (m *FundAccount) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *FundAccount) GetRealFundAccount() string {
	if m != nil {
		return m.RealFundAccount
	}
	return ""
}

func (m *FundAccount) GetRealClientType() string {
	if m != nil {
		return m.RealClientType
	}
	return ""
}

func (m *FundAccount) GetRealClientId() string {
	if m != nil {
		return m.RealClientId
	}
	return ""
}

func (m *FundAccount) GetClientName() string {
	if m != nil {
		return m.ClientName
	}
	return ""
}

func (m *FundAccount) GetCertType() string {
	if m != nil {
		return m.CertType
	}
	return ""
}

func (m *FundAccount) GetCertId() string {
	if m != nil {
		return m.CertId
	}
	return ""
}

func (m *FundAccount) GetOpenAt() int64 {
	if m != nil {
		return m.OpenAt
	}
	return 0
}

func (m *FundAccount) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

func (m *FundAccount) GetChangeAt() int64 {
	if m != nil {
		return m.ChangeAt
	}
	return 0
}

// 资金账号列表的返回消息
type ListFundAccountResp struct {
	RespStatus *RespStatus    `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	PageInfo   *PageInfo      `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	Data       []*FundAccount `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *ListFundAccountResp) Reset()                    { *m = ListFundAccountResp{} }
func (m *ListFundAccountResp) String() string            { return proto.CompactTextString(m) }
func (*ListFundAccountResp) ProtoMessage()               {}
func (*ListFundAccountResp) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{13} }

func (m *ListFundAccountResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListFundAccountResp) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *ListFundAccountResp) GetData() []*FundAccount {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*RegisterClientReq)(nil), "grpcapi.RegisterClientReq")
	proto.RegisterType((*RegisterClientResp)(nil), "grpcapi.RegisterClientResp")
	proto.RegisterType((*CloseClientReq)(nil), "grpcapi.CloseClientReq")
	proto.RegisterType((*CloseClientResp)(nil), "grpcapi.CloseClientResp")
	proto.RegisterType((*FrozenClientReq)(nil), "grpcapi.FrozenClientReq")
	proto.RegisterType((*FrozenClientResp)(nil), "grpcapi.FrozenClientResp")
	proto.RegisterType((*QueryClientReq)(nil), "grpcapi.QueryClientReq")
	proto.RegisterType((*Client)(nil), "grpcapi.Client")
	proto.RegisterType((*GetClientResp)(nil), "grpcapi.GetClientResp")
	proto.RegisterType((*AddFundAccountReq)(nil), "grpcapi.AddFundAccountReq")
	proto.RegisterType((*AddFundAccountResp)(nil), "grpcapi.AddFundAccountResp")
	proto.RegisterType((*QueryFundAccountReq)(nil), "grpcapi.QueryFundAccountReq")
	proto.RegisterType((*FundAccount)(nil), "grpcapi.FundAccount")
	proto.RegisterType((*ListFundAccountResp)(nil), "grpcapi.ListFundAccountResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClientManager service

type ClientManagerClient interface {
	// 注册客户
	RegisterClient(ctx context.Context, in *RegisterClientReq, opts ...grpc.CallOption) (*RegisterClientResp, error)
	// 注销客户
	CloseClient(ctx context.Context, in *CloseClientReq, opts ...grpc.CallOption) (*CloseClientResp, error)
	// 冻结客户
	FrozenClient(ctx context.Context, in *FrozenClientReq, opts ...grpc.CallOption) (*FrozenClientResp, error)
	// 根据真实客户ID，查询客户
	GetClientByRealClient(ctx context.Context, in *QueryClientReq, opts ...grpc.CallOption) (*GetClientResp, error)
	// 根据证件，查询客户
	GetClientByCert(ctx context.Context, in *QueryClientReq, opts ...grpc.CallOption) (*GetClientResp, error)
	// 添加资金账号
	AddFundAccount(ctx context.Context, in *AddFundAccountReq, opts ...grpc.CallOption) (*AddFundAccountResp, error)
	// 根据客户ID，查询资金账号
	ListFundAccountByRealClient(ctx context.Context, in *QueryFundAccountReq, opts ...grpc.CallOption) (*ListFundAccountResp, error)
}

type clientManagerClient struct {
	cc *grpc.ClientConn
}

func NewClientManagerClient(cc *grpc.ClientConn) ClientManagerClient {
	return &clientManagerClient{cc}
}

func (c *clientManagerClient) RegisterClient(ctx context.Context, in *RegisterClientReq, opts ...grpc.CallOption) (*RegisterClientResp, error) {
	out := new(RegisterClientResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/RegisterClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) CloseClient(ctx context.Context, in *CloseClientReq, opts ...grpc.CallOption) (*CloseClientResp, error) {
	out := new(CloseClientResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/CloseClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) FrozenClient(ctx context.Context, in *FrozenClientReq, opts ...grpc.CallOption) (*FrozenClientResp, error) {
	out := new(FrozenClientResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/FrozenClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) GetClientByRealClient(ctx context.Context, in *QueryClientReq, opts ...grpc.CallOption) (*GetClientResp, error) {
	out := new(GetClientResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/GetClientByRealClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) GetClientByCert(ctx context.Context, in *QueryClientReq, opts ...grpc.CallOption) (*GetClientResp, error) {
	out := new(GetClientResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/GetClientByCert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) AddFundAccount(ctx context.Context, in *AddFundAccountReq, opts ...grpc.CallOption) (*AddFundAccountResp, error) {
	out := new(AddFundAccountResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/AddFundAccount", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientManagerClient) ListFundAccountByRealClient(ctx context.Context, in *QueryFundAccountReq, opts ...grpc.CallOption) (*ListFundAccountResp, error) {
	out := new(ListFundAccountResp)
	err := grpc.Invoke(ctx, "/grpcapi.ClientManager/ListFundAccountByRealClient", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ClientManager service

type ClientManagerServer interface {
	// 注册客户
	RegisterClient(context.Context, *RegisterClientReq) (*RegisterClientResp, error)
	// 注销客户
	CloseClient(context.Context, *CloseClientReq) (*CloseClientResp, error)
	// 冻结客户
	FrozenClient(context.Context, *FrozenClientReq) (*FrozenClientResp, error)
	// 根据真实客户ID，查询客户
	GetClientByRealClient(context.Context, *QueryClientReq) (*GetClientResp, error)
	// 根据证件，查询客户
	GetClientByCert(context.Context, *QueryClientReq) (*GetClientResp, error)
	// 添加资金账号
	AddFundAccount(context.Context, *AddFundAccountReq) (*AddFundAccountResp, error)
	// 根据客户ID，查询资金账号
	ListFundAccountByRealClient(context.Context, *QueryFundAccountReq) (*ListFundAccountResp, error)
}

func RegisterClientManagerServer(s *grpc.Server, srv ClientManagerServer) {
	s.RegisterService(&_ClientManager_serviceDesc, srv)
}

func _ClientManager_RegisterClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).RegisterClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/RegisterClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).RegisterClient(ctx, req.(*RegisterClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_CloseClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).CloseClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/CloseClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).CloseClient(ctx, req.(*CloseClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_FrozenClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FrozenClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).FrozenClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/FrozenClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).FrozenClient(ctx, req.(*FrozenClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_GetClientByRealClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).GetClientByRealClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/GetClientByRealClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).GetClientByRealClient(ctx, req.(*QueryClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_GetClientByCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).GetClientByCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/GetClientByCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).GetClientByCert(ctx, req.(*QueryClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_AddFundAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFundAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).AddFundAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/AddFundAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).AddFundAccount(ctx, req.(*AddFundAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientManager_ListFundAccountByRealClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFundAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientManagerServer).ListFundAccountByRealClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.ClientManager/ListFundAccountByRealClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientManagerServer).ListFundAccountByRealClient(ctx, req.(*QueryFundAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _ClientManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.ClientManager",
	HandlerType: (*ClientManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterClient",
			Handler:    _ClientManager_RegisterClient_Handler,
		},
		{
			MethodName: "CloseClient",
			Handler:    _ClientManager_CloseClient_Handler,
		},
		{
			MethodName: "FrozenClient",
			Handler:    _ClientManager_FrozenClient_Handler,
		},
		{
			MethodName: "GetClientByRealClient",
			Handler:    _ClientManager_GetClientByRealClient_Handler,
		},
		{
			MethodName: "GetClientByCert",
			Handler:    _ClientManager_GetClientByCert_Handler,
		},
		{
			MethodName: "AddFundAccount",
			Handler:    _ClientManager_AddFundAccount_Handler,
		},
		{
			MethodName: "ListFundAccountByRealClient",
			Handler:    _ClientManager_ListFundAccountByRealClient_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "client.proto",
}

func init() { proto.RegisterFile("client.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 975 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0x4d, 0x8f, 0xdb, 0x44,
	0x18, 0x96, 0xe3, 0x24, 0xbb, 0x79, 0x93, 0x38, 0xd9, 0xd9, 0xee, 0xae, 0xeb, 0x8d, 0xd0, 0x6a,
	0x40, 0x28, 0xaa, 0x44, 0x22, 0x6d, 0x6f, 0xdc, 0x76, 0x57, 0x2a, 0x5a, 0x89, 0xf2, 0x61, 0x38,
	0x40, 0x0f, 0x48, 0x13, 0x7b, 0x62, 0x4c, 0x13, 0x8f, 0x3b, 0x76, 0x90, 0x02, 0x37, 0xfe, 0x02,
	0x3f, 0x81, 0x9f, 0xc4, 0x85, 0x3b, 0xfc, 0x05, 0xca, 0x91, 0xca, 0x33, 0x8e, 0x3d, 0xe3, 0x3a,
	0xdb, 0x34, 0xdd, 0xde, 0xfc, 0x7e, 0xe4, 0x79, 0x3f, 0xe7, 0x99, 0x09, 0xf4, 0xbc, 0x45, 0x48,
	0xa3, 0x74, 0x12, 0x73, 0x96, 0x32, 0x74, 0x10, 0xf0, 0xd8, 0x23, 0x71, 0xe8, 0x8c, 0x02, 0xc6,
	0x82, 0x05, 0x9d, 0x92, 0x38, 0x9c, 0x92, 0x28, 0x62, 0x29, 0x49, 0x43, 0x16, 0x25, 0xd2, 0xcd,
	0xe9, 0x79, 0x6c, 0xb9, 0x64, 0x91, 0x94, 0xf0, 0x7f, 0x06, 0x1c, 0xb9, 0x34, 0x08, 0x93, 0x94,
	0xf2, 0x1b, 0x81, 0xe6, 0xd2, 0x17, 0xe8, 0x11, 0x1c, 0xcc, 0x48, 0x42, 0x5d, 0xfa, 0xc2, 0x36,
	0x2e, 0x8c, 0x71, 0xf7, 0x72, 0x38, 0xc9, 0xc1, 0x27, 0xd7, 0x52, 0xef, 0x6e, 0x1c, 0xd0, 0xc7,
	0x60, 0x71, 0x4a, 0x16, 0xf2, 0xc7, 0xdf, 0xae, 0x63, 0x6a, 0x37, 0x2e, 0x8c, 0x71, 0xc7, 0xad,
	0x68, 0x11, 0x86, 0x5e, 0xa9, 0xb9, 0xf5, 0x6d, 0x53, 0x78, 0x69, 0x3a, 0xf4, 0x01, 0x80, 0x2c,
	0xe9, 0x0b, 0xb2, 0xa4, 0x76, 0x53, 0x78, 0x28, 0x1a, 0xe4, 0xc0, 0xa1, 0x47, 0xb9, 0x8c, 0xd2,
	0x12, 0xd6, 0x42, 0x46, 0xa7, 0xd0, 0xce, 0xbe, 0x6f, 0x7d, 0xbb, 0x2d, 0x2c, 0xb9, 0x94, 0xe9,
	0x39, 0x5d, 0x12, 0xfe, 0xdc, 0x3e, 0x90, 0x7a, 0x29, 0x61, 0x0a, 0xa8, 0x5a, 0x78, 0x12, 0xa3,
	0xc7, 0x00, 0x9c, 0x26, 0xf1, 0x37, 0x29, 0x49, 0x57, 0x49, 0x5e, 0xfc, 0x71, 0x51, 0xbc, 0x5b,
	0x98, 0x5c, 0xc5, 0x4d, 0xa4, 0xb5, 0x29, 0x2b, 0x2b, 0xde, 0x74, 0x0b, 0x19, 0x7f, 0x07, 0xd6,
	0xcd, 0x82, 0x25, 0x74, 0xbf, 0xe6, 0xde, 0x85, 0x3c, 0x83, 0x81, 0x86, 0xfc, 0x3e, 0xb2, 0xff,
	0x1e, 0x06, 0x4f, 0x38, 0xfb, 0x85, 0x46, 0xf7, 0x9f, 0xbe, 0x07, 0x43, 0x1d, 0xfa, 0x7d, 0xe4,
	0xff, 0x97, 0x01, 0xd6, 0xd7, 0x2b, 0xca, 0xd7, 0xf7, 0x9e, 0x7f, 0xcd, 0xde, 0x9b, 0x3b, 0xed,
	0x7d, 0xb3, 0x66, 0xef, 0xf7, 0xd8, 0x6b, 0xfc, 0xb2, 0x01, 0x6d, 0x09, 0x80, 0x2c, 0x68, 0x84,
	0xbe, 0xa8, 0xc6, 0x74, 0x1b, 0x61, 0xf5, 0x18, 0x35, 0xea, 0x8e, 0xd1, 0x7c, 0xb5, 0x58, 0x08,
	0xab, 0x4c, 0xba, 0x90, 0xb5, 0x54, 0x9a, 0x5b, 0x53, 0x69, 0x55, 0x8f, 0x58, 0x22, 0x47, 0x96,
	0xa5, 0xd8, 0x72, 0x73, 0x69, 0xdb, 0xd1, 0xcb, 0x62, 0xcc, 0x38, 0x7b, 0x4e, 0xf9, 0xad, 0x6f,
	0x1f, 0xca, 0x18, 0x1b, 0x19, 0x8d, 0xa0, 0x23, 0xbf, 0xbf, 0xe4, 0x81, 0xdd, 0x11, 0xc6, 0x52,
	0x51, 0xd3, 0x74, 0xd8, 0xa9, 0xe9, 0xdd, 0x2d, 0x4d, 0xe7, 0x94, 0xa4, 0xf4, 0x2a, 0xb5, 0x7b,
	0xf9, 0x70, 0x73, 0x59, 0xd8, 0x7e, 0x24, 0x51, 0x90, 0xd9, 0xfa, 0xb9, 0x2d, 0x97, 0x71, 0x08,
	0xfd, 0xcf, 0x68, 0xfa, 0xae, 0x5b, 0xfb, 0x21, 0x34, 0x7d, 0x92, 0x12, 0x31, 0x9d, 0xee, 0xe5,
	0xa0, 0x70, 0xcf, 0x71, 0x85, 0x11, 0xff, 0x6f, 0xc0, 0xd1, 0x95, 0xef, 0x3f, 0x59, 0x45, 0xfe,
	0x95, 0xe7, 0xb1, 0xd5, 0xdb, 0x6f, 0x30, 0x82, 0x66, 0x54, 0x2e, 0x81, 0xf8, 0x56, 0xc6, 0x62,
	0x6a, 0x63, 0x19, 0xc3, 0x20, 0x6b, 0x90, 0x12, 0x2d, 0xdf, 0x80, 0xaa, 0xba, 0x66, 0x0c, 0xad,
	0x9d, 0xc6, 0xd0, 0xae, 0x19, 0xc3, 0x08, 0x3a, 0x4b, 0x16, 0xd1, 0xb5, 0x80, 0x91, 0x7b, 0x52,
	0x2a, 0x30, 0x03, 0x54, 0x6d, 0xc0, 0xbe, 0x1d, 0xff, 0x08, 0xfa, 0xf3, 0x12, 0xa7, 0x38, 0xd1,
	0xba, 0x12, 0xbf, 0x34, 0xe0, 0x58, 0x30, 0xc6, 0x3b, 0x34, 0xfd, 0x13, 0x38, 0x8c, 0x49, 0x40,
	0x6f, 0xa3, 0x39, 0xcb, 0xe7, 0x7b, 0x54, 0x38, 0x7f, 0x95, 0x1b, 0xdc, 0xc2, 0x45, 0x63, 0x19,
	0xf3, 0x8d, 0x2c, 0xd3, 0xdc, 0xa9, 0xd3, 0xad, 0xfa, 0x4e, 0xc7, 0x9c, 0xfd, 0x44, 0xbd, 0xcd,
	0x28, 0x4c, 0xb7, 0x54, 0xe0, 0x7f, 0x4d, 0xe8, 0xaa, 0x33, 0xae, 0x92, 0x4a, 0xdd, 0x26, 0x8d,
	0xa0, 0x43, 0x92, 0x84, 0xaa, 0xf4, 0x57, 0x2a, 0xf4, 0xc9, 0x36, 0x2b, 0x93, 0x55, 0x48, 0xa3,
	0xa5, 0x91, 0xc6, 0x08, 0x3a, 0x29, 0x27, 0x3e, 0x7d, 0xca, 0x7c, 0x9a, 0xf3, 0x49, 0xa9, 0xc8,
	0xa8, 0x2d, 0xa1, 0x69, 0xba, 0x90, 0xe6, 0x03, 0x61, 0x56, 0x34, 0xca, 0x6e, 0x1f, 0xbe, 0x69,
	0xb7, 0x3b, 0xbb, 0xee, 0xf6, 0xfe, 0x14, 0xa3, 0x13, 0x71, 0xef, 0xce, 0xf7, 0x4c, 0x7f, 0x2b,
	0xd9, 0x5a, 0x55, 0xb2, 0x65, 0x31, 0x8d, 0xae, 0x52, 0x7b, 0x20, 0x66, 0x93, 0x4b, 0x1a, 0x9d,
	0x0d, 0xef, 0xa0, 0xb3, 0xa3, 0x0a, 0x9d, 0xfd, 0x61, 0xc0, 0xf1, 0xe7, 0x61, 0x92, 0xde, 0xcb,
	0x19, 0x7b, 0xcb, 0xcd, 0x1f, 0xe7, 0x24, 0x68, 0x5e, 0x98, 0xe3, 0xee, 0xe5, 0x83, 0xc2, 0x55,
	0xcd, 0x45, 0x78, 0x5c, 0xfe, 0xdd, 0x82, 0xbe, 0x6c, 0xeb, 0x53, 0x12, 0x91, 0x80, 0x72, 0x34,
	0x07, 0x4b, 0x7f, 0xbf, 0x21, 0x47, 0xc9, 0xae, 0xf2, 0xa2, 0x75, 0xce, 0xb7, 0xda, 0x92, 0x18,
	0x9f, 0xff, 0xf6, 0xe7, 0x3f, 0xbf, 0x37, 0x4e, 0xf0, 0x70, 0x2a, 0x67, 0x33, 0xe5, 0xb9, 0xcf,
	0xa7, 0xc6, 0x23, 0xf4, 0x0c, 0xba, 0xca, 0x33, 0x0b, 0x9d, 0x29, 0x4c, 0xad, 0x3e, 0xeb, 0x1c,
	0xbb, 0xde, 0x90, 0xc4, 0xd8, 0x16, 0xf0, 0xc8, 0xe9, 0x6f, 0xe0, 0xbd, 0xcc, 0x21, 0xc3, 0xfe,
	0x01, 0x7a, 0xea, 0x1b, 0x08, 0x95, 0x18, 0x95, 0x57, 0x97, 0xf3, 0x70, 0x8b, 0x25, 0x89, 0xf1,
	0x43, 0x01, 0x7f, 0xec, 0x58, 0x1b, 0xf8, 0xb9, 0xf0, 0xc8, 0xf0, 0xe7, 0x70, 0x52, 0x5c, 0x55,
	0xd7, 0x6b, 0xb7, 0x58, 0x4d, 0xa5, 0x0a, 0xfd, 0x75, 0xe4, 0x9c, 0x16, 0x06, 0xed, 0x8e, 0xc3,
	0x23, 0x11, 0xe4, 0x14, 0x3d, 0xd8, 0x04, 0x99, 0xad, 0xb3, 0x4d, 0x97, 0x02, 0x7a, 0x06, 0x03,
	0x25, 0xce, 0x0d, 0xe5, 0x7b, 0x44, 0x38, 0x15, 0x11, 0x86, 0xc8, 0x2a, 0x23, 0x64, 0x1b, 0x8f,
	0x96, 0x60, 0xe9, 0x37, 0x80, 0x32, 0xe7, 0xd7, 0xee, 0x46, 0x65, 0xce, 0xaf, 0x5f, 0x1b, 0x18,
	0x8b, 0x10, 0x23, 0x7c, 0x56, 0x74, 0x6a, 0x15, 0xf9, 0x44, 0x3a, 0x4c, 0x89, 0xef, 0x67, 0x2d,
	0xfb, 0x15, 0xce, 0x2b, 0xa7, 0x41, 0x6b, 0xdc, 0x48, 0x2f, 0xab, 0x12, 0xbd, 0xb4, 0xd6, 0x9c,
	0x28, 0x7c, 0x21, 0xc2, 0x3b, 0xc8, 0xae, 0x0b, 0xbf, 0x08, 0x93, 0xf4, 0xfa, 0x0c, 0x4e, 0x3c,
	0xb6, 0x9c, 0x04, 0xf3, 0xc9, 0xcf, 0x64, 0x92, 0xc1, 0xe4, 0x70, 0xb3, 0xb6, 0xf8, 0xb7, 0xf6,
	0xf8, 0x55, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x75, 0x3a, 0xf6, 0xf2, 0x0d, 0x00, 0x00,
}
