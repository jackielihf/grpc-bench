// Code generated by protoc-gen-go.
// source: system.proto
// DO NOT EDIT!

package grpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 查询系统状态信息的消息
type QuerySystemReq struct {
	BaseReq  *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	InitDate int64    `protobuf:"varint,2,opt,name=initDate" json:"initDate,omitempty"`
}

func (m *QuerySystemReq) Reset()                    { *m = QuerySystemReq{} }
func (m *QuerySystemReq) String() string            { return proto.CompactTextString(m) }
func (*QuerySystemReq) ProtoMessage()               {}
func (*QuerySystemReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{0} }

func (m *QuerySystemReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QuerySystemReq) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

// 系统状态 对象
type System struct {
	InitDate      int64  `protobuf:"varint,1,opt,name=initDate" json:"initDate,omitempty"`
	Status        int32  `protobuf:"varint,2,opt,name=status" json:"status,omitempty"`
	OpenFundBegin int32  `protobuf:"varint,3,opt,name=openFundBegin" json:"openFundBegin,omitempty"`
	OpenFundEnd   int32  `protobuf:"varint,4,opt,name=openFundEnd" json:"openFundEnd,omitempty"`
	Remark        string `protobuf:"bytes,5,opt,name=remark" json:"remark,omitempty"`
	UpdateAt      int64  `protobuf:"varint,6,opt,name=updateAt" json:"updateAt,omitempty"`
}

func (m *System) Reset()                    { *m = System{} }
func (m *System) String() string            { return proto.CompactTextString(m) }
func (*System) ProtoMessage()               {}
func (*System) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{1} }

func (m *System) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

func (m *System) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *System) GetOpenFundBegin() int32 {
	if m != nil {
		return m.OpenFundBegin
	}
	return 0
}

func (m *System) GetOpenFundEnd() int32 {
	if m != nil {
		return m.OpenFundEnd
	}
	return 0
}

func (m *System) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *System) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

// 查询系统状态信息的消息相应
type SystemResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Data       *System     `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *SystemResp) Reset()                    { *m = SystemResp{} }
func (m *SystemResp) String() string            { return proto.CompactTextString(m) }
func (*SystemResp) ProtoMessage()               {}
func (*SystemResp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{2} }

func (m *SystemResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *SystemResp) GetData() *System {
	if m != nil {
		return m.Data
	}
	return nil
}

// 查询ping的消息
type QueryPingReq struct {
	BaseReq *BaseReq `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
}

func (m *QueryPingReq) Reset()                    { *m = QueryPingReq{} }
func (m *QueryPingReq) String() string            { return proto.CompactTextString(m) }
func (*QueryPingReq) ProtoMessage()               {}
func (*QueryPingReq) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{3} }

func (m *QueryPingReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

// 查询Ping消息相应
type PingResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Data       string      `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *PingResp) Reset()                    { *m = PingResp{} }
func (m *PingResp) String() string            { return proto.CompactTextString(m) }
func (*PingResp) ProtoMessage()               {}
func (*PingResp) Descriptor() ([]byte, []int) { return fileDescriptor6, []int{4} }

func (m *PingResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *PingResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func init() {
	proto.RegisterType((*QuerySystemReq)(nil), "grpcapi.QuerySystemReq")
	proto.RegisterType((*System)(nil), "grpcapi.System")
	proto.RegisterType((*SystemResp)(nil), "grpcapi.SystemResp")
	proto.RegisterType((*QueryPingReq)(nil), "grpcapi.QueryPingReq")
	proto.RegisterType((*PingResp)(nil), "grpcapi.PingResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SystemManager service

type SystemManagerClient interface {
	// 查询系统状态信息
	GetSystemInfo(ctx context.Context, in *QuerySystemReq, opts ...grpc.CallOption) (*SystemResp, error)
	// ping
	Ping(ctx context.Context, in *QueryPingReq, opts ...grpc.CallOption) (*PingResp, error)
}

type systemManagerClient struct {
	cc *grpc.ClientConn
}

func NewSystemManagerClient(cc *grpc.ClientConn) SystemManagerClient {
	return &systemManagerClient{cc}
}

func (c *systemManagerClient) GetSystemInfo(ctx context.Context, in *QuerySystemReq, opts ...grpc.CallOption) (*SystemResp, error) {
	out := new(SystemResp)
	err := grpc.Invoke(ctx, "/grpcapi.SystemManager/GetSystemInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *systemManagerClient) Ping(ctx context.Context, in *QueryPingReq, opts ...grpc.CallOption) (*PingResp, error) {
	out := new(PingResp)
	err := grpc.Invoke(ctx, "/grpcapi.SystemManager/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SystemManager service

type SystemManagerServer interface {
	// 查询系统状态信息
	GetSystemInfo(context.Context, *QuerySystemReq) (*SystemResp, error)
	// ping
	Ping(context.Context, *QueryPingReq) (*PingResp, error)
}

func RegisterSystemManagerServer(s *grpc.Server, srv SystemManagerServer) {
	s.RegisterService(&_SystemManager_serviceDesc, srv)
}

func _SystemManager_GetSystemInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySystemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagerServer).GetSystemInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.SystemManager/GetSystemInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagerServer).GetSystemInfo(ctx, req.(*QuerySystemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SystemManager_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SystemManagerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.SystemManager/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SystemManagerServer).Ping(ctx, req.(*QueryPingReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _SystemManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.SystemManager",
	HandlerType: (*SystemManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSystemInfo",
			Handler:    _SystemManager_GetSystemInfo_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _SystemManager_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "system.proto",
}

func init() { proto.RegisterFile("system.proto", fileDescriptor6) }

var fileDescriptor6 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x4d, 0xae, 0xd3, 0x30,
	0x14, 0x85, 0x95, 0xf7, 0xda, 0xf4, 0xbd, 0xdb, 0xe4, 0x01, 0x2e, 0xa5, 0x51, 0xc4, 0x20, 0x0a,
	0x0c, 0x2a, 0x06, 0x89, 0xd4, 0xce, 0x98, 0x20, 0x2a, 0x7e, 0xc4, 0x00, 0x09, 0x9c, 0x09, 0x53,
	0xb7, 0x71, 0x2d, 0x0b, 0x62, 0xbb, 0xb1, 0x83, 0xd4, 0x29, 0x5b, 0x60, 0x0d, 0xec, 0x81, 0x7d,
	0xb0, 0x05, 0x16, 0x82, 0x62, 0x27, 0x51, 0xc3, 0x0c, 0x86, 0xf7, 0xf8, 0xf8, 0xd3, 0xb9, 0x47,
	0x17, 0x02, 0x7d, 0xd6, 0x86, 0x56, 0x99, 0xaa, 0xa5, 0x91, 0x68, 0xc6, 0x6a, 0x75, 0x20, 0x8a,
	0xc7, 0x8f, 0x99, 0x94, 0xec, 0x0b, 0xcd, 0x89, 0xe2, 0x39, 0x11, 0x42, 0x1a, 0x62, 0xb8, 0x14,
	0xda, 0xd9, 0xe2, 0xe0, 0x20, 0xab, 0x4a, 0x0a, 0x37, 0xa5, 0x9f, 0xe0, 0xee, 0x63, 0x43, 0xeb,
	0x73, 0x61, 0x49, 0x98, 0x9e, 0xd0, 0x33, 0x98, 0xed, 0x89, 0xa6, 0x98, 0x9e, 0x22, 0x2f, 0xf1,
	0xd6, 0xf3, 0xcd, 0xfd, 0xac, 0x03, 0x67, 0x3b, 0xa7, 0xe3, 0xde, 0x80, 0x62, 0xb8, 0xe1, 0x82,
	0x9b, 0x57, 0xc4, 0xd0, 0xe8, 0x2a, 0xf1, 0xd6, 0xd7, 0x78, 0x98, 0xd3, 0x9f, 0x1e, 0xf8, 0x8e,
	0x3a, 0xb2, 0x79, 0x63, 0x1b, 0x7a, 0x04, 0xbe, 0x36, 0xc4, 0x34, 0xda, 0x02, 0xa6, 0xb8, 0x9b,
	0xd0, 0x53, 0x08, 0xa5, 0xa2, 0xe2, 0x4d, 0x23, 0xca, 0x1d, 0x65, 0x5c, 0x44, 0xd7, 0xf6, 0x79,
	0x2c, 0xa2, 0x04, 0xe6, 0xbd, 0xf0, 0x5a, 0x94, 0xd1, 0xc4, 0x7a, 0x2e, 0xa5, 0x96, 0x5f, 0xd3,
	0x8a, 0xd4, 0x9f, 0xa3, 0x69, 0xe2, 0xad, 0x6f, 0x71, 0x37, 0xb5, 0x99, 0x1a, 0x55, 0x12, 0x43,
	0x5f, 0x9a, 0xc8, 0x77, 0x99, 0xfa, 0x39, 0x3d, 0x02, 0xf4, 0x7d, 0x68, 0x85, 0xb6, 0x00, 0x35,
	0xd5, 0xaa, 0x70, 0x29, 0x5d, 0x27, 0x8b, 0xa1, 0x13, 0x3c, 0x3c, 0xe1, 0x0b, 0x1b, 0x7a, 0x02,
	0x93, 0x92, 0x18, 0x62, 0x97, 0x9a, 0x6f, 0xee, 0x0d, 0xf6, 0x8e, 0x6b, 0x1f, 0xd3, 0xe7, 0x10,
	0xd8, 0xf2, 0x3f, 0x70, 0xc1, 0xfe, 0xb1, 0xfa, 0xb4, 0x80, 0x1b, 0xf7, 0xed, 0x7f, 0x13, 0xa2,
	0x8b, 0x84, 0xb7, 0x2e, 0xd0, 0xe6, 0x87, 0x07, 0xa1, 0x4b, 0xf8, 0x9e, 0x08, 0xc2, 0x68, 0x8d,
	0x0a, 0x08, 0xdf, 0x52, 0xe3, 0xb4, 0x77, 0xe2, 0x28, 0xd1, 0x6a, 0xe0, 0x8e, 0xef, 0x26, 0x5e,
	0xfc, 0xbd, 0x23, 0xd5, 0x2a, 0x7d, 0xf8, 0xed, 0xd7, 0xef, 0xef, 0x57, 0x77, 0x28, 0xc8, 0xdd,
	0xa9, 0xe6, 0xbc, 0x65, 0xbc, 0x80, 0x49, 0x9b, 0x1d, 0x2d, 0xc7, 0xac, 0xae, 0x86, 0xf8, 0xc1,
	0x20, 0xf7, 0x1b, 0xa6, 0xa1, 0xe5, 0xcc, 0xd0, 0x34, 0x57, 0x5c, 0xb0, 0xdd, 0x0a, 0x96, 0x07,
	0x59, 0x65, 0xec, 0x98, 0x7d, 0x25, 0x59, 0x6b, 0xec, 0x3e, 0xec, 0x7d, 0x7b, 0xd5, 0xdb, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x24, 0xb8, 0x70, 0xf8, 0x1a, 0x03, 0x00, 0x00,
}
