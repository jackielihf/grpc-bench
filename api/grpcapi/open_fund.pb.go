// Code generated by protoc-gen-go.
// source: open_fund.proto
// DO NOT EDIT!

package grpcapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// 基金认购
type OpenFundSubReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Balance     float64      `protobuf:"fixed64,6,opt,name=balance" json:"balance,omitempty"`
	ChargeType  string       `protobuf:"bytes,7,opt,name=chargeType" json:"chargeType,omitempty"`
}

func (m *OpenFundSubReq) Reset()                    { *m = OpenFundSubReq{} }
func (m *OpenFundSubReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundSubReq) ProtoMessage()               {}
func (*OpenFundSubReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *OpenFundSubReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundSubReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundSubReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundSubReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundSubReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundSubReq) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *OpenFundSubReq) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

// 基金申购
type OpenFundApplyReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Balance     float64      `protobuf:"fixed64,6,opt,name=balance" json:"balance,omitempty"`
	ChargeType  string       `protobuf:"bytes,7,opt,name=chargeType" json:"chargeType,omitempty"`
}

func (m *OpenFundApplyReq) Reset()                    { *m = OpenFundApplyReq{} }
func (m *OpenFundApplyReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundApplyReq) ProtoMessage()               {}
func (*OpenFundApplyReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

func (m *OpenFundApplyReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundApplyReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundApplyReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundApplyReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundApplyReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundApplyReq) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *OpenFundApplyReq) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

// 基金赎回
type OpenFundRedeemReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Amount      float64      `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	ExceedFlag  string       `protobuf:"bytes,7,opt,name=exceedFlag" json:"exceedFlag,omitempty"`
}

func (m *OpenFundRedeemReq) Reset()                    { *m = OpenFundRedeemReq{} }
func (m *OpenFundRedeemReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundRedeemReq) ProtoMessage()               {}
func (*OpenFundRedeemReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

func (m *OpenFundRedeemReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundRedeemReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundRedeemReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundRedeemReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundRedeemReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundRedeemReq) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OpenFundRedeemReq) GetExceedFlag() string {
	if m != nil {
		return m.ExceedFlag
	}
	return ""
}

// 基金委托撤单
type OpenFundWithdrawReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	EntrustId   string       `protobuf:"bytes,5,opt,name=entrustId" json:"entrustId,omitempty"`
}

func (m *OpenFundWithdrawReq) Reset()                    { *m = OpenFundWithdrawReq{} }
func (m *OpenFundWithdrawReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundWithdrawReq) ProtoMessage()               {}
func (*OpenFundWithdrawReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *OpenFundWithdrawReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundWithdrawReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundWithdrawReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundWithdrawReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundWithdrawReq) GetEntrustId() string {
	if m != nil {
		return m.EntrustId
	}
	return ""
}

// 基金转换
type OpenFundTransReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Amount      float64      `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	ExceedFlag  string       `protobuf:"bytes,7,opt,name=exceedFlag" json:"exceedFlag,omitempty"`
	TransCode   string       `protobuf:"bytes,8,opt,name=transCode" json:"transCode,omitempty"`
}

func (m *OpenFundTransReq) Reset()                    { *m = OpenFundTransReq{} }
func (m *OpenFundTransReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundTransReq) ProtoMessage()               {}
func (*OpenFundTransReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

func (m *OpenFundTransReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundTransReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundTransReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundTransReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundTransReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundTransReq) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OpenFundTransReq) GetExceedFlag() string {
	if m != nil {
		return m.ExceedFlag
	}
	return ""
}

func (m *OpenFundTransReq) GetTransCode() string {
	if m != nil {
		return m.TransCode
	}
	return ""
}

// 开基委托的响应消息
type OpenFundEntrustResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	EntrustId  string      `protobuf:"bytes,2,opt,name=entrustId" json:"entrustId,omitempty"`
}

func (m *OpenFundEntrustResp) Reset()                    { *m = OpenFundEntrustResp{} }
func (m *OpenFundEntrustResp) String() string            { return proto.CompactTextString(m) }
func (*OpenFundEntrustResp) ProtoMessage()               {}
func (*OpenFundEntrustResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *OpenFundEntrustResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *OpenFundEntrustResp) GetEntrustId() string {
	if m != nil {
		return m.EntrustId
	}
	return ""
}

// 基金预约认购
type OpenFundAdvSubReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Balance     float64      `protobuf:"fixed64,6,opt,name=balance" json:"balance,omitempty"`
	ChargeType  string       `protobuf:"bytes,7,opt,name=chargeType" json:"chargeType,omitempty"`
	HopeDate    int64        `protobuf:"varint,8,opt,name=hopeDate" json:"hopeDate,omitempty"`
}

func (m *OpenFundAdvSubReq) Reset()                    { *m = OpenFundAdvSubReq{} }
func (m *OpenFundAdvSubReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundAdvSubReq) ProtoMessage()               {}
func (*OpenFundAdvSubReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *OpenFundAdvSubReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundAdvSubReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundAdvSubReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundAdvSubReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundAdvSubReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundAdvSubReq) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *OpenFundAdvSubReq) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

func (m *OpenFundAdvSubReq) GetHopeDate() int64 {
	if m != nil {
		return m.HopeDate
	}
	return 0
}

// 基金预约申购
type OpenFundAdvApplyReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Balance     float64      `protobuf:"fixed64,6,opt,name=balance" json:"balance,omitempty"`
	ChargeType  string       `protobuf:"bytes,7,opt,name=chargeType" json:"chargeType,omitempty"`
	HopeDate    int64        `protobuf:"varint,8,opt,name=hopeDate" json:"hopeDate,omitempty"`
}

func (m *OpenFundAdvApplyReq) Reset()                    { *m = OpenFundAdvApplyReq{} }
func (m *OpenFundAdvApplyReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundAdvApplyReq) ProtoMessage()               {}
func (*OpenFundAdvApplyReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *OpenFundAdvApplyReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundAdvApplyReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundAdvApplyReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundAdvApplyReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundAdvApplyReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundAdvApplyReq) GetBalance() float64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *OpenFundAdvApplyReq) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

func (m *OpenFundAdvApplyReq) GetHopeDate() int64 {
	if m != nil {
		return m.HopeDate
	}
	return 0
}

// 基金赎回
type OpenFundAdvRedeemReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Amount      float64      `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	ExceedFlag  string       `protobuf:"bytes,7,opt,name=exceedFlag" json:"exceedFlag,omitempty"`
	HopeDate    int64        `protobuf:"varint,8,opt,name=hopeDate" json:"hopeDate,omitempty"`
}

func (m *OpenFundAdvRedeemReq) Reset()                    { *m = OpenFundAdvRedeemReq{} }
func (m *OpenFundAdvRedeemReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundAdvRedeemReq) ProtoMessage()               {}
func (*OpenFundAdvRedeemReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

func (m *OpenFundAdvRedeemReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundAdvRedeemReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundAdvRedeemReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundAdvRedeemReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundAdvRedeemReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundAdvRedeemReq) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OpenFundAdvRedeemReq) GetExceedFlag() string {
	if m != nil {
		return m.ExceedFlag
	}
	return ""
}

func (m *OpenFundAdvRedeemReq) GetHopeDate() int64 {
	if m != nil {
		return m.HopeDate
	}
	return 0
}

// 基金转换
type OpenFundAdvTransReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	StockCode   string       `protobuf:"bytes,5,opt,name=stockCode" json:"stockCode,omitempty"`
	Amount      float64      `protobuf:"fixed64,6,opt,name=amount" json:"amount,omitempty"`
	ExceedFlag  string       `protobuf:"bytes,7,opt,name=exceedFlag" json:"exceedFlag,omitempty"`
	TransCode   string       `protobuf:"bytes,8,opt,name=transCode" json:"transCode,omitempty"`
	HopeDate    int64        `protobuf:"varint,9,opt,name=hopeDate" json:"hopeDate,omitempty"`
}

func (m *OpenFundAdvTransReq) Reset()                    { *m = OpenFundAdvTransReq{} }
func (m *OpenFundAdvTransReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundAdvTransReq) ProtoMessage()               {}
func (*OpenFundAdvTransReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *OpenFundAdvTransReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundAdvTransReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundAdvTransReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundAdvTransReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundAdvTransReq) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OpenFundAdvTransReq) GetAmount() float64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *OpenFundAdvTransReq) GetExceedFlag() string {
	if m != nil {
		return m.ExceedFlag
	}
	return ""
}

func (m *OpenFundAdvTransReq) GetTransCode() string {
	if m != nil {
		return m.TransCode
	}
	return ""
}

func (m *OpenFundAdvTransReq) GetHopeDate() int64 {
	if m != nil {
		return m.HopeDate
	}
	return 0
}

// 基金预约委托撤单
type OpenFundAdvWithdrawReq struct {
	BaseReq     *BaseReq     `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	TradeHeader *TradeHeader `protobuf:"bytes,2,opt,name=tradeHeader" json:"tradeHeader,omitempty"`
	ClientId    int64        `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId   int64        `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	EntrustId   string       `protobuf:"bytes,5,opt,name=entrustId" json:"entrustId,omitempty"`
}

func (m *OpenFundAdvWithdrawReq) Reset()                    { *m = OpenFundAdvWithdrawReq{} }
func (m *OpenFundAdvWithdrawReq) String() string            { return proto.CompactTextString(m) }
func (*OpenFundAdvWithdrawReq) ProtoMessage()               {}
func (*OpenFundAdvWithdrawReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

func (m *OpenFundAdvWithdrawReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *OpenFundAdvWithdrawReq) GetTradeHeader() *TradeHeader {
	if m != nil {
		return m.TradeHeader
	}
	return nil
}

func (m *OpenFundAdvWithdrawReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OpenFundAdvWithdrawReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OpenFundAdvWithdrawReq) GetEntrustId() string {
	if m != nil {
		return m.EntrustId
	}
	return ""
}

// 查询基金委托的消息
type QueryOFEntrustReq struct {
	BaseReq       *BaseReq  `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	PageInfo      *PageInfo `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	ClientId      int64     `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId     int64     `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
	Status        string    `protobuf:"bytes,5,opt,name=status" json:"status,omitempty"`
	BusinessFlag  string    `protobuf:"bytes,6,opt,name=businessFlag" json:"businessFlag,omitempty"`
	EntrustStatus string    `protobuf:"bytes,7,opt,name=entrustStatus" json:"entrustStatus,omitempty"`
	BeginDate     string    `protobuf:"bytes,8,opt,name=beginDate" json:"beginDate,omitempty"`
	EndDate       string    `protobuf:"bytes,9,opt,name=endDate" json:"endDate,omitempty"`
}

func (m *QueryOFEntrustReq) Reset()                    { *m = QueryOFEntrustReq{} }
func (m *QueryOFEntrustReq) String() string            { return proto.CompactTextString(m) }
func (*QueryOFEntrustReq) ProtoMessage()               {}
func (*QueryOFEntrustReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

func (m *QueryOFEntrustReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryOFEntrustReq) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QueryOFEntrustReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryOFEntrustReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *QueryOFEntrustReq) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryOFEntrustReq) GetBusinessFlag() string {
	if m != nil {
		return m.BusinessFlag
	}
	return ""
}

func (m *QueryOFEntrustReq) GetEntrustStatus() string {
	if m != nil {
		return m.EntrustStatus
	}
	return ""
}

func (m *QueryOFEntrustReq) GetBeginDate() string {
	if m != nil {
		return m.BeginDate
	}
	return ""
}

func (m *QueryOFEntrustReq) GetEndDate() string {
	if m != nil {
		return m.EndDate
	}
	return ""
}

// 基金委托的消息体
type OFEntrust struct {
	Id             string  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	JoinNo         string  `protobuf:"bytes,2,opt,name=joinNo" json:"joinNo,omitempty"`
	OperatorType   string  `protobuf:"bytes,3,opt,name=operatorType" json:"operatorType,omitempty"`
	Operator       string  `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
	EntrustWay     string  `protobuf:"bytes,5,opt,name=entrustWay" json:"entrustWay,omitempty"`
	ProjectId      int64   `protobuf:"varint,6,opt,name=projectId" json:"projectId,omitempty"`
	ClientId       int64   `protobuf:"varint,7,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId  int64   `protobuf:"varint,8,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	ExtNo          string  `protobuf:"bytes,9,opt,name=extNo" json:"extNo,omitempty"`
	EntrustNo      string  `protobuf:"bytes,10,opt,name=entrustNo" json:"entrustNo,omitempty"`
	OriginId       string  `protobuf:"bytes,11,opt,name=originId" json:"originId,omitempty"`
	InitDate       int64   `protobuf:"varint,12,opt,name=initDate" json:"initDate,omitempty"`
	HopeDate       int64   `protobuf:"varint,13,opt,name=hopeDate" json:"hopeDate,omitempty"`
	DealDate       int64   `protobuf:"varint,14,opt,name=dealDate" json:"dealDate,omitempty"`
	EntrustDate    int64   `protobuf:"varint,15,opt,name=entrustDate" json:"entrustDate,omitempty"`
	WithdrawDate   int64   `protobuf:"varint,16,opt,name=withdrawDate" json:"withdrawDate,omitempty"`
	FinanceType    string  `protobuf:"bytes,17,opt,name=financeType" json:"financeType,omitempty"`
	BusinessFlag   string  `protobuf:"bytes,18,opt,name=businessFlag" json:"businessFlag,omitempty"`
	MoneyType      string  `protobuf:"bytes,19,opt,name=moneyType" json:"moneyType,omitempty"`
	ExchangeType   string  `protobuf:"bytes,20,opt,name=exchangeType" json:"exchangeType,omitempty"`
	StockType      string  `protobuf:"bytes,21,opt,name=stockType" json:"stockType,omitempty"`
	StockCode      string  `protobuf:"bytes,22,opt,name=stockCode" json:"stockCode,omitempty"`
	StockName      string  `protobuf:"bytes,23,opt,name=stockName" json:"stockName,omitempty"`
	FundCompany    string  `protobuf:"bytes,24,opt,name=fundCompany" json:"fundCompany,omitempty"`
	TransCode      string  `protobuf:"bytes,25,opt,name=transCode" json:"transCode,omitempty"`
	EntrustType    string  `protobuf:"bytes,26,opt,name=entrustType" json:"entrustType,omitempty"`
	EntrustAmount  float64 `protobuf:"fixed64,27,opt,name=entrustAmount" json:"entrustAmount,omitempty"`
	EntrustPrice   float64 `protobuf:"fixed64,28,opt,name=entrustPrice" json:"entrustPrice,omitempty"`
	EntrustBalance float64 `protobuf:"fixed64,29,opt,name=entrustBalance" json:"entrustBalance,omitempty"`
	EntrustStatus  string  `protobuf:"bytes,30,opt,name=entrustStatus" json:"entrustStatus,omitempty"`
	DealAmount     float64 `protobuf:"fixed64,31,opt,name=dealAmount" json:"dealAmount,omitempty"`
	DealPrice      float64 `protobuf:"fixed64,32,opt,name=dealPrice" json:"dealPrice,omitempty"`
	DealBalance    float64 `protobuf:"fixed64,33,opt,name=dealBalance" json:"dealBalance,omitempty"`
	FrozenBalance  float64 `protobuf:"fixed64,34,opt,name=frozenBalance" json:"frozenBalance,omitempty"`
	TradeFee       float64 `protobuf:"fixed64,35,opt,name=tradeFee" json:"tradeFee,omitempty"`
	ExceedFlag     string  `protobuf:"bytes,36,opt,name=exceedFlag" json:"exceedFlag,omitempty"`
	ChargeType     string  `protobuf:"bytes,37,opt,name=chargeType" json:"chargeType,omitempty"`
	Status         int32   `protobuf:"varint,38,opt,name=status" json:"status,omitempty"`
	Remark         string  `protobuf:"bytes,39,opt,name=remark" json:"remark,omitempty"`
}

func (m *OFEntrust) Reset()                    { *m = OFEntrust{} }
func (m *OFEntrust) String() string            { return proto.CompactTextString(m) }
func (*OFEntrust) ProtoMessage()               {}
func (*OFEntrust) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *OFEntrust) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *OFEntrust) GetJoinNo() string {
	if m != nil {
		return m.JoinNo
	}
	return ""
}

func (m *OFEntrust) GetOperatorType() string {
	if m != nil {
		return m.OperatorType
	}
	return ""
}

func (m *OFEntrust) GetOperator() string {
	if m != nil {
		return m.Operator
	}
	return ""
}

func (m *OFEntrust) GetEntrustWay() string {
	if m != nil {
		return m.EntrustWay
	}
	return ""
}

func (m *OFEntrust) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OFEntrust) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OFEntrust) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *OFEntrust) GetExtNo() string {
	if m != nil {
		return m.ExtNo
	}
	return ""
}

func (m *OFEntrust) GetEntrustNo() string {
	if m != nil {
		return m.EntrustNo
	}
	return ""
}

func (m *OFEntrust) GetOriginId() string {
	if m != nil {
		return m.OriginId
	}
	return ""
}

func (m *OFEntrust) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

func (m *OFEntrust) GetHopeDate() int64 {
	if m != nil {
		return m.HopeDate
	}
	return 0
}

func (m *OFEntrust) GetDealDate() int64 {
	if m != nil {
		return m.DealDate
	}
	return 0
}

func (m *OFEntrust) GetEntrustDate() int64 {
	if m != nil {
		return m.EntrustDate
	}
	return 0
}

func (m *OFEntrust) GetWithdrawDate() int64 {
	if m != nil {
		return m.WithdrawDate
	}
	return 0
}

func (m *OFEntrust) GetFinanceType() string {
	if m != nil {
		return m.FinanceType
	}
	return ""
}

func (m *OFEntrust) GetBusinessFlag() string {
	if m != nil {
		return m.BusinessFlag
	}
	return ""
}

func (m *OFEntrust) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

func (m *OFEntrust) GetExchangeType() string {
	if m != nil {
		return m.ExchangeType
	}
	return ""
}

func (m *OFEntrust) GetStockType() string {
	if m != nil {
		return m.StockType
	}
	return ""
}

func (m *OFEntrust) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OFEntrust) GetStockName() string {
	if m != nil {
		return m.StockName
	}
	return ""
}

func (m *OFEntrust) GetFundCompany() string {
	if m != nil {
		return m.FundCompany
	}
	return ""
}

func (m *OFEntrust) GetTransCode() string {
	if m != nil {
		return m.TransCode
	}
	return ""
}

func (m *OFEntrust) GetEntrustType() string {
	if m != nil {
		return m.EntrustType
	}
	return ""
}

func (m *OFEntrust) GetEntrustAmount() float64 {
	if m != nil {
		return m.EntrustAmount
	}
	return 0
}

func (m *OFEntrust) GetEntrustPrice() float64 {
	if m != nil {
		return m.EntrustPrice
	}
	return 0
}

func (m *OFEntrust) GetEntrustBalance() float64 {
	if m != nil {
		return m.EntrustBalance
	}
	return 0
}

func (m *OFEntrust) GetEntrustStatus() string {
	if m != nil {
		return m.EntrustStatus
	}
	return ""
}

func (m *OFEntrust) GetDealAmount() float64 {
	if m != nil {
		return m.DealAmount
	}
	return 0
}

func (m *OFEntrust) GetDealPrice() float64 {
	if m != nil {
		return m.DealPrice
	}
	return 0
}

func (m *OFEntrust) GetDealBalance() float64 {
	if m != nil {
		return m.DealBalance
	}
	return 0
}

func (m *OFEntrust) GetFrozenBalance() float64 {
	if m != nil {
		return m.FrozenBalance
	}
	return 0
}

func (m *OFEntrust) GetTradeFee() float64 {
	if m != nil {
		return m.TradeFee
	}
	return 0
}

func (m *OFEntrust) GetExceedFlag() string {
	if m != nil {
		return m.ExceedFlag
	}
	return ""
}

func (m *OFEntrust) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

func (m *OFEntrust) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *OFEntrust) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

// 基金委托列表的响应消息
type ListOFEntrustResp struct {
	RespStatus *RespStatus  `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Page       *PageInfo    `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	Data       []*OFEntrust `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *ListOFEntrustResp) Reset()                    { *m = ListOFEntrustResp{} }
func (m *ListOFEntrustResp) String() string            { return proto.CompactTextString(m) }
func (*ListOFEntrustResp) ProtoMessage()               {}
func (*ListOFEntrustResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *ListOFEntrustResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListOFEntrustResp) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ListOFEntrustResp) GetData() []*OFEntrust {
	if m != nil {
		return m.Data
	}
	return nil
}

// 查询资产单元的当前持仓
type QueryOFStockReq struct {
	BaseReq   *BaseReq  `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	PageInfo  *PageInfo `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	ClientId  int64     `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId int64     `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *QueryOFStockReq) Reset()                    { *m = QueryOFStockReq{} }
func (m *QueryOFStockReq) String() string            { return proto.CompactTextString(m) }
func (*QueryOFStockReq) ProtoMessage()               {}
func (*QueryOFStockReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

func (m *QueryOFStockReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryOFStockReq) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QueryOFStockReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryOFStockReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 基金持仓的消息体
type OFStock struct {
	ProjectId     int64   `protobuf:"varint,1,opt,name=projectId" json:"projectId,omitempty"`
	ClientId      int64   `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId int64   `protobuf:"varint,3,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	InitDate      int64   `protobuf:"varint,4,opt,name=initDate" json:"initDate,omitempty"`
	FundCompany   string  `protobuf:"bytes,5,opt,name=fundCompany" json:"fundCompany,omitempty"`
	ExchangeType  string  `protobuf:"bytes,6,opt,name=exchangeType" json:"exchangeType,omitempty"`
	StockType     string  `protobuf:"bytes,7,opt,name=stockType" json:"stockType,omitempty"`
	StockCode     string  `protobuf:"bytes,8,opt,name=stockCode" json:"stockCode,omitempty"`
	StockName     string  `protobuf:"bytes,9,opt,name=stockName" json:"stockName,omitempty"`
	MoneyType     string  `protobuf:"bytes,10,opt,name=moneyType" json:"moneyType,omitempty"`
	ChargeType    string  `protobuf:"bytes,11,opt,name=chargeType" json:"chargeType,omitempty"`
	CurrentAmount float64 `protobuf:"fixed64,12,opt,name=currentAmount" json:"currentAmount,omitempty"`
	FrozenAmount  float64 `protobuf:"fixed64,13,opt,name=frozenAmount" json:"frozenAmount,omitempty"`
	EnableAmount  float64 `protobuf:"fixed64,14,opt,name=enableAmount" json:"enableAmount,omitempty"`
	MarketValue   float64 `protobuf:"fixed64,15,opt,name=marketValue" json:"marketValue,omitempty"`
	CostPrice     float64 `protobuf:"fixed64,16,opt,name=costPrice" json:"costPrice,omitempty"`
	Nav           float64 `protobuf:"fixed64,17,opt,name=nav" json:"nav,omitempty"`
	Remark        string  `protobuf:"bytes,18,opt,name=remark" json:"remark,omitempty"`
	Version       int64   `protobuf:"varint,19,opt,name=version" json:"version,omitempty"`
	UpdateAt      int64   `protobuf:"varint,20,opt,name=updateAt" json:"updateAt,omitempty"`
}

func (m *OFStock) Reset()                    { *m = OFStock{} }
func (m *OFStock) String() string            { return proto.CompactTextString(m) }
func (*OFStock) ProtoMessage()               {}
func (*OFStock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *OFStock) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OFStock) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OFStock) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *OFStock) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

func (m *OFStock) GetFundCompany() string {
	if m != nil {
		return m.FundCompany
	}
	return ""
}

func (m *OFStock) GetExchangeType() string {
	if m != nil {
		return m.ExchangeType
	}
	return ""
}

func (m *OFStock) GetStockType() string {
	if m != nil {
		return m.StockType
	}
	return ""
}

func (m *OFStock) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OFStock) GetStockName() string {
	if m != nil {
		return m.StockName
	}
	return ""
}

func (m *OFStock) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

func (m *OFStock) GetChargeType() string {
	if m != nil {
		return m.ChargeType
	}
	return ""
}

func (m *OFStock) GetCurrentAmount() float64 {
	if m != nil {
		return m.CurrentAmount
	}
	return 0
}

func (m *OFStock) GetFrozenAmount() float64 {
	if m != nil {
		return m.FrozenAmount
	}
	return 0
}

func (m *OFStock) GetEnableAmount() float64 {
	if m != nil {
		return m.EnableAmount
	}
	return 0
}

func (m *OFStock) GetMarketValue() float64 {
	if m != nil {
		return m.MarketValue
	}
	return 0
}

func (m *OFStock) GetCostPrice() float64 {
	if m != nil {
		return m.CostPrice
	}
	return 0
}

func (m *OFStock) GetNav() float64 {
	if m != nil {
		return m.Nav
	}
	return 0
}

func (m *OFStock) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *OFStock) GetVersion() int64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *OFStock) GetUpdateAt() int64 {
	if m != nil {
		return m.UpdateAt
	}
	return 0
}

// 基金持仓列表的响应消息
type ListOFStockResp struct {
	RespStatus *RespStatus `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Page       *PageInfo   `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	Data       []*OFStock  `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *ListOFStockResp) Reset()                    { *m = ListOFStockResp{} }
func (m *ListOFStockResp) String() string            { return proto.CompactTextString(m) }
func (*ListOFStockResp) ProtoMessage()               {}
func (*ListOFStockResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *ListOFStockResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListOFStockResp) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ListOFStockResp) GetData() []*OFStock {
	if m != nil {
		return m.Data
	}
	return nil
}

// 查询资产单元的当前持仓变动流水
type QueryOFStockJourReq struct {
	BaseReq   *BaseReq  `protobuf:"bytes,1,opt,name=baseReq" json:"baseReq,omitempty"`
	PageInfo  *PageInfo `protobuf:"bytes,2,opt,name=pageInfo" json:"pageInfo,omitempty"`
	ClientId  int64     `protobuf:"varint,3,opt,name=clientId" json:"clientId,omitempty"`
	ProjectId int64     `protobuf:"varint,4,opt,name=projectId" json:"projectId,omitempty"`
}

func (m *QueryOFStockJourReq) Reset()                    { *m = QueryOFStockJourReq{} }
func (m *QueryOFStockJourReq) String() string            { return proto.CompactTextString(m) }
func (*QueryOFStockJourReq) ProtoMessage()               {}
func (*QueryOFStockJourReq) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *QueryOFStockJourReq) GetBaseReq() *BaseReq {
	if m != nil {
		return m.BaseReq
	}
	return nil
}

func (m *QueryOFStockJourReq) GetPageInfo() *PageInfo {
	if m != nil {
		return m.PageInfo
	}
	return nil
}

func (m *QueryOFStockJourReq) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *QueryOFStockJourReq) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

// 基金持仓变动流水的消息体
type OFStockJour struct {
	ProjectId          int64   `protobuf:"varint,1,opt,name=projectId" json:"projectId,omitempty"`
	ClientId           int64   `protobuf:"varint,2,opt,name=clientId" json:"clientId,omitempty"`
	FundAccountId      int64   `protobuf:"varint,3,opt,name=fundAccountId" json:"fundAccountId,omitempty"`
	InitDate           int64   `protobuf:"varint,4,opt,name=initDate" json:"initDate,omitempty"`
	ExtNo              string  `protobuf:"bytes,5,opt,name=extNo" json:"extNo,omitempty"`
	FinanceType        string  `protobuf:"bytes,6,opt,name=financeType" json:"financeType,omitempty"`
	BusinessFlag       string  `protobuf:"bytes,7,opt,name=businessFlag" json:"businessFlag,omitempty"`
	Src                string  `protobuf:"bytes,8,opt,name=src" json:"src,omitempty"`
	FundCompany        string  `protobuf:"bytes,9,opt,name=fundCompany" json:"fundCompany,omitempty"`
	ExchangeType       string  `protobuf:"bytes,10,opt,name=exchangeType" json:"exchangeType,omitempty"`
	StockType          string  `protobuf:"bytes,11,opt,name=stockType" json:"stockType,omitempty"`
	StockCode          string  `protobuf:"bytes,12,opt,name=stockCode" json:"stockCode,omitempty"`
	StockName          string  `protobuf:"bytes,13,opt,name=stockName" json:"stockName,omitempty"`
	MoneyType          string  `protobuf:"bytes,14,opt,name=moneyType" json:"moneyType,omitempty"`
	OccurCurrentAmount float64 `protobuf:"fixed64,15,opt,name=occurCurrentAmount" json:"occurCurrentAmount,omitempty"`
	PostCurrentAmount  float64 `protobuf:"fixed64,16,opt,name=postCurrentAmount" json:"postCurrentAmount,omitempty"`
	OccurFrozenAmount  float64 `protobuf:"fixed64,17,opt,name=occurFrozenAmount" json:"occurFrozenAmount,omitempty"`
	PostFrozenAmount   float64 `protobuf:"fixed64,18,opt,name=postFrozenAmount" json:"postFrozenAmount,omitempty"`
	OccurEnableAmount  float64 `protobuf:"fixed64,19,opt,name=occurEnableAmount" json:"occurEnableAmount,omitempty"`
	PostEnableAmount   float64 `protobuf:"fixed64,20,opt,name=postEnableAmount" json:"postEnableAmount,omitempty"`
	Remark             string  `protobuf:"bytes,21,opt,name=remark" json:"remark,omitempty"`
	CreateAt           int64   `protobuf:"varint,22,opt,name=createAt" json:"createAt,omitempty"`
}

func (m *OFStockJour) Reset()                    { *m = OFStockJour{} }
func (m *OFStockJour) String() string            { return proto.CompactTextString(m) }
func (*OFStockJour) ProtoMessage()               {}
func (*OFStockJour) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *OFStockJour) GetProjectId() int64 {
	if m != nil {
		return m.ProjectId
	}
	return 0
}

func (m *OFStockJour) GetClientId() int64 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *OFStockJour) GetFundAccountId() int64 {
	if m != nil {
		return m.FundAccountId
	}
	return 0
}

func (m *OFStockJour) GetInitDate() int64 {
	if m != nil {
		return m.InitDate
	}
	return 0
}

func (m *OFStockJour) GetExtNo() string {
	if m != nil {
		return m.ExtNo
	}
	return ""
}

func (m *OFStockJour) GetFinanceType() string {
	if m != nil {
		return m.FinanceType
	}
	return ""
}

func (m *OFStockJour) GetBusinessFlag() string {
	if m != nil {
		return m.BusinessFlag
	}
	return ""
}

func (m *OFStockJour) GetSrc() string {
	if m != nil {
		return m.Src
	}
	return ""
}

func (m *OFStockJour) GetFundCompany() string {
	if m != nil {
		return m.FundCompany
	}
	return ""
}

func (m *OFStockJour) GetExchangeType() string {
	if m != nil {
		return m.ExchangeType
	}
	return ""
}

func (m *OFStockJour) GetStockType() string {
	if m != nil {
		return m.StockType
	}
	return ""
}

func (m *OFStockJour) GetStockCode() string {
	if m != nil {
		return m.StockCode
	}
	return ""
}

func (m *OFStockJour) GetStockName() string {
	if m != nil {
		return m.StockName
	}
	return ""
}

func (m *OFStockJour) GetMoneyType() string {
	if m != nil {
		return m.MoneyType
	}
	return ""
}

func (m *OFStockJour) GetOccurCurrentAmount() float64 {
	if m != nil {
		return m.OccurCurrentAmount
	}
	return 0
}

func (m *OFStockJour) GetPostCurrentAmount() float64 {
	if m != nil {
		return m.PostCurrentAmount
	}
	return 0
}

func (m *OFStockJour) GetOccurFrozenAmount() float64 {
	if m != nil {
		return m.OccurFrozenAmount
	}
	return 0
}

func (m *OFStockJour) GetPostFrozenAmount() float64 {
	if m != nil {
		return m.PostFrozenAmount
	}
	return 0
}

func (m *OFStockJour) GetOccurEnableAmount() float64 {
	if m != nil {
		return m.OccurEnableAmount
	}
	return 0
}

func (m *OFStockJour) GetPostEnableAmount() float64 {
	if m != nil {
		return m.PostEnableAmount
	}
	return 0
}

func (m *OFStockJour) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *OFStockJour) GetCreateAt() int64 {
	if m != nil {
		return m.CreateAt
	}
	return 0
}

// 基金持仓变动流水列表的响应消息
type ListOFStockJourResp struct {
	RespStatus *RespStatus    `protobuf:"bytes,1,opt,name=respStatus" json:"respStatus,omitempty"`
	Page       *PageInfo      `protobuf:"bytes,2,opt,name=page" json:"page,omitempty"`
	Data       []*OFStockJour `protobuf:"bytes,3,rep,name=data" json:"data,omitempty"`
}

func (m *ListOFStockJourResp) Reset()                    { *m = ListOFStockJourResp{} }
func (m *ListOFStockJourResp) String() string            { return proto.CompactTextString(m) }
func (*ListOFStockJourResp) ProtoMessage()               {}
func (*ListOFStockJourResp) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

func (m *ListOFStockJourResp) GetRespStatus() *RespStatus {
	if m != nil {
		return m.RespStatus
	}
	return nil
}

func (m *ListOFStockJourResp) GetPage() *PageInfo {
	if m != nil {
		return m.Page
	}
	return nil
}

func (m *ListOFStockJourResp) GetData() []*OFStockJour {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*OpenFundSubReq)(nil), "grpcapi.OpenFundSubReq")
	proto.RegisterType((*OpenFundApplyReq)(nil), "grpcapi.OpenFundApplyReq")
	proto.RegisterType((*OpenFundRedeemReq)(nil), "grpcapi.OpenFundRedeemReq")
	proto.RegisterType((*OpenFundWithdrawReq)(nil), "grpcapi.OpenFundWithdrawReq")
	proto.RegisterType((*OpenFundTransReq)(nil), "grpcapi.OpenFundTransReq")
	proto.RegisterType((*OpenFundEntrustResp)(nil), "grpcapi.OpenFundEntrustResp")
	proto.RegisterType((*OpenFundAdvSubReq)(nil), "grpcapi.OpenFundAdvSubReq")
	proto.RegisterType((*OpenFundAdvApplyReq)(nil), "grpcapi.OpenFundAdvApplyReq")
	proto.RegisterType((*OpenFundAdvRedeemReq)(nil), "grpcapi.OpenFundAdvRedeemReq")
	proto.RegisterType((*OpenFundAdvTransReq)(nil), "grpcapi.OpenFundAdvTransReq")
	proto.RegisterType((*OpenFundAdvWithdrawReq)(nil), "grpcapi.OpenFundAdvWithdrawReq")
	proto.RegisterType((*QueryOFEntrustReq)(nil), "grpcapi.QueryOFEntrustReq")
	proto.RegisterType((*OFEntrust)(nil), "grpcapi.OFEntrust")
	proto.RegisterType((*ListOFEntrustResp)(nil), "grpcapi.ListOFEntrustResp")
	proto.RegisterType((*QueryOFStockReq)(nil), "grpcapi.QueryOFStockReq")
	proto.RegisterType((*OFStock)(nil), "grpcapi.OFStock")
	proto.RegisterType((*ListOFStockResp)(nil), "grpcapi.ListOFStockResp")
	proto.RegisterType((*QueryOFStockJourReq)(nil), "grpcapi.QueryOFStockJourReq")
	proto.RegisterType((*OFStockJour)(nil), "grpcapi.OFStockJour")
	proto.RegisterType((*ListOFStockJourResp)(nil), "grpcapi.ListOFStockJourResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for OpenFund service

type OpenFundClient interface {
	// 基金认购
	OpenFundSub(ctx context.Context, in *OpenFundSubReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金申购
	OpenFundApply(ctx context.Context, in *OpenFundApplyReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金赎回
	OpenFundRedeem(ctx context.Context, in *OpenFundRedeemReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金委托撤单
	OpenFundWithdraw(ctx context.Context, in *OpenFundWithdrawReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金转换
	OpenFundTrans(ctx context.Context, in *OpenFundTransReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金预约认购
	OpenFundAdvSub(ctx context.Context, in *OpenFundAdvSubReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金预约申购
	OpenFundAdvApply(ctx context.Context, in *OpenFundAdvApplyReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金预约赎回
	OpenFundAdvRedeem(ctx context.Context, in *OpenFundAdvRedeemReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金预约转换
	OpenFundAdvTrans(ctx context.Context, in *OpenFundAdvTransReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 基金预约委托撤单
	OpenFundAdvWithdraw(ctx context.Context, in *OpenFundAdvWithdrawReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error)
	// 查询资产单元的委托列表
	ListOFEntrust(ctx context.Context, in *QueryOFEntrustReq, opts ...grpc.CallOption) (*ListOFEntrustResp, error)
	// 查询资产单元的当前持仓
	ListOFStock(ctx context.Context, in *QueryOFStockReq, opts ...grpc.CallOption) (*ListOFStockResp, error)
	// 查询资产单元的持仓变动流水
	ListOFStockJour(ctx context.Context, in *QueryOFStockJourReq, opts ...grpc.CallOption) (*ListOFStockJourResp, error)
}

type openFundClient struct {
	cc *grpc.ClientConn
}

func NewOpenFundClient(cc *grpc.ClientConn) OpenFundClient {
	return &openFundClient{cc}
}

func (c *openFundClient) OpenFundSub(ctx context.Context, in *OpenFundSubReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundSub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundApply(ctx context.Context, in *OpenFundApplyReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundRedeem(ctx context.Context, in *OpenFundRedeemReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundRedeem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundWithdraw(ctx context.Context, in *OpenFundWithdrawReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundWithdraw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundTrans(ctx context.Context, in *OpenFundTransReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundTrans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundAdvSub(ctx context.Context, in *OpenFundAdvSubReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundAdvSub", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundAdvApply(ctx context.Context, in *OpenFundAdvApplyReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundAdvApply", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundAdvRedeem(ctx context.Context, in *OpenFundAdvRedeemReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundAdvRedeem", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundAdvTrans(ctx context.Context, in *OpenFundAdvTransReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundAdvTrans", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) OpenFundAdvWithdraw(ctx context.Context, in *OpenFundAdvWithdrawReq, opts ...grpc.CallOption) (*OpenFundEntrustResp, error) {
	out := new(OpenFundEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/OpenFundAdvWithdraw", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) ListOFEntrust(ctx context.Context, in *QueryOFEntrustReq, opts ...grpc.CallOption) (*ListOFEntrustResp, error) {
	out := new(ListOFEntrustResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/ListOFEntrust", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) ListOFStock(ctx context.Context, in *QueryOFStockReq, opts ...grpc.CallOption) (*ListOFStockResp, error) {
	out := new(ListOFStockResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/ListOFStock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openFundClient) ListOFStockJour(ctx context.Context, in *QueryOFStockJourReq, opts ...grpc.CallOption) (*ListOFStockJourResp, error) {
	out := new(ListOFStockJourResp)
	err := grpc.Invoke(ctx, "/grpcapi.OpenFund/ListOFStockJour", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for OpenFund service

type OpenFundServer interface {
	// 基金认购
	OpenFundSub(context.Context, *OpenFundSubReq) (*OpenFundEntrustResp, error)
	// 基金申购
	OpenFundApply(context.Context, *OpenFundApplyReq) (*OpenFundEntrustResp, error)
	// 基金赎回
	OpenFundRedeem(context.Context, *OpenFundRedeemReq) (*OpenFundEntrustResp, error)
	// 基金委托撤单
	OpenFundWithdraw(context.Context, *OpenFundWithdrawReq) (*OpenFundEntrustResp, error)
	// 基金转换
	OpenFundTrans(context.Context, *OpenFundTransReq) (*OpenFundEntrustResp, error)
	// 基金预约认购
	OpenFundAdvSub(context.Context, *OpenFundAdvSubReq) (*OpenFundEntrustResp, error)
	// 基金预约申购
	OpenFundAdvApply(context.Context, *OpenFundAdvApplyReq) (*OpenFundEntrustResp, error)
	// 基金预约赎回
	OpenFundAdvRedeem(context.Context, *OpenFundAdvRedeemReq) (*OpenFundEntrustResp, error)
	// 基金预约转换
	OpenFundAdvTrans(context.Context, *OpenFundAdvTransReq) (*OpenFundEntrustResp, error)
	// 基金预约委托撤单
	OpenFundAdvWithdraw(context.Context, *OpenFundAdvWithdrawReq) (*OpenFundEntrustResp, error)
	// 查询资产单元的委托列表
	ListOFEntrust(context.Context, *QueryOFEntrustReq) (*ListOFEntrustResp, error)
	// 查询资产单元的当前持仓
	ListOFStock(context.Context, *QueryOFStockReq) (*ListOFStockResp, error)
	// 查询资产单元的持仓变动流水
	ListOFStockJour(context.Context, *QueryOFStockJourReq) (*ListOFStockJourResp, error)
}

func RegisterOpenFundServer(s *grpc.Server, srv OpenFundServer) {
	s.RegisterService(&_OpenFund_serviceDesc, srv)
}

func _OpenFund_OpenFundSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundSub(ctx, req.(*OpenFundSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundApply(ctx, req.(*OpenFundApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundRedeemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundRedeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundRedeem(ctx, req.(*OpenFundRedeemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundWithdraw(ctx, req.(*OpenFundWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundTrans(ctx, req.(*OpenFundTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundAdvSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundAdvSubReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundAdvSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundAdvSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundAdvSub(ctx, req.(*OpenFundAdvSubReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundAdvApply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundAdvApplyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundAdvApply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundAdvApply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundAdvApply(ctx, req.(*OpenFundAdvApplyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundAdvRedeem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundAdvRedeemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundAdvRedeem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundAdvRedeem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundAdvRedeem(ctx, req.(*OpenFundAdvRedeemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundAdvTrans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundAdvTransReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundAdvTrans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundAdvTrans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundAdvTrans(ctx, req.(*OpenFundAdvTransReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_OpenFundAdvWithdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenFundAdvWithdrawReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).OpenFundAdvWithdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/OpenFundAdvWithdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).OpenFundAdvWithdraw(ctx, req.(*OpenFundAdvWithdrawReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_ListOFEntrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOFEntrustReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).ListOFEntrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/ListOFEntrust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).ListOFEntrust(ctx, req.(*QueryOFEntrustReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_ListOFStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOFStockReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).ListOFStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/ListOFStock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).ListOFStock(ctx, req.(*QueryOFStockReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenFund_ListOFStockJour_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOFStockJourReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenFundServer).ListOFStockJour(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpcapi.OpenFund/ListOFStockJour",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenFundServer).ListOFStockJour(ctx, req.(*QueryOFStockJourReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _OpenFund_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpcapi.OpenFund",
	HandlerType: (*OpenFundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OpenFundSub",
			Handler:    _OpenFund_OpenFundSub_Handler,
		},
		{
			MethodName: "OpenFundApply",
			Handler:    _OpenFund_OpenFundApply_Handler,
		},
		{
			MethodName: "OpenFundRedeem",
			Handler:    _OpenFund_OpenFundRedeem_Handler,
		},
		{
			MethodName: "OpenFundWithdraw",
			Handler:    _OpenFund_OpenFundWithdraw_Handler,
		},
		{
			MethodName: "OpenFundTrans",
			Handler:    _OpenFund_OpenFundTrans_Handler,
		},
		{
			MethodName: "OpenFundAdvSub",
			Handler:    _OpenFund_OpenFundAdvSub_Handler,
		},
		{
			MethodName: "OpenFundAdvApply",
			Handler:    _OpenFund_OpenFundAdvApply_Handler,
		},
		{
			MethodName: "OpenFundAdvRedeem",
			Handler:    _OpenFund_OpenFundAdvRedeem_Handler,
		},
		{
			MethodName: "OpenFundAdvTrans",
			Handler:    _OpenFund_OpenFundAdvTrans_Handler,
		},
		{
			MethodName: "OpenFundAdvWithdraw",
			Handler:    _OpenFund_OpenFundAdvWithdraw_Handler,
		},
		{
			MethodName: "ListOFEntrust",
			Handler:    _OpenFund_ListOFEntrust_Handler,
		},
		{
			MethodName: "ListOFStock",
			Handler:    _OpenFund_ListOFStock_Handler,
		},
		{
			MethodName: "ListOFStockJour",
			Handler:    _OpenFund_ListOFStockJour_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "open_fund.proto",
}

func init() { proto.RegisterFile("open_fund.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1739 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x59, 0xcb, 0x6f, 0xdb, 0x46,
	0x1a, 0x07, 0x25, 0x5b, 0xb6, 0x46, 0x96, 0x2d, 0x8d, 0xfc, 0x60, 0x14, 0xc7, 0xd1, 0x72, 0x9d,
	0xac, 0x11, 0xec, 0xda, 0x40, 0x02, 0xec, 0x61, 0x6f, 0x4e, 0x36, 0xc6, 0x7a, 0xb1, 0x70, 0xb2,
	0x4c, 0xb0, 0x39, 0x6c, 0x81, 0x62, 0x4c, 0x8e, 0x65, 0x3a, 0xd2, 0x0c, 0xc3, 0x87, 0x13, 0xf7,
	0xd8, 0x43, 0xdb, 0x7b, 0x0e, 0x3d, 0xf4, 0xda, 0xa6, 0x40, 0xff, 0x8c, 0xf6, 0xd8, 0x53, 0xd1,
	0xfc, 0x09, 0xfd, 0x07, 0x7a, 0xee, 0xa5, 0x98, 0x07, 0x87, 0x33, 0x24, 0x23, 0xc5, 0x2d, 0x82,
	0x26, 0x75, 0x6f, 0xfa, 0x1e, 0xfa, 0xbe, 0x99, 0xdf, 0x7c, 0xdf, 0x6f, 0x1e, 0x04, 0x4b, 0x34,
	0xc4, 0xe4, 0xfd, 0xa3, 0x94, 0xf8, 0xdb, 0x61, 0x44, 0x13, 0x0a, 0xe7, 0x86, 0x51, 0xe8, 0xa1,
	0x30, 0xe8, 0xaf, 0x0f, 0x29, 0x1d, 0x8e, 0xf0, 0x0e, 0x0a, 0x83, 0x1d, 0x44, 0x08, 0x4d, 0x50,
	0x12, 0x50, 0x12, 0x0b, 0xb7, 0xfe, 0x82, 0x47, 0xc7, 0x63, 0x4a, 0x84, 0xe4, 0x7c, 0x54, 0x03,
	0x8b, 0xf7, 0x42, 0x4c, 0xf6, 0x52, 0xe2, 0x3f, 0x48, 0x0f, 0x5d, 0xfc, 0x04, 0xde, 0x00, 0x73,
	0x87, 0x28, 0xc6, 0x2e, 0x7e, 0x62, 0x5b, 0x03, 0x6b, 0xab, 0x75, 0xb3, 0xb3, 0x2d, 0x23, 0x6f,
	0xdf, 0x16, 0x7a, 0x37, 0x73, 0x80, 0x7f, 0x07, 0xad, 0x24, 0x42, 0x3e, 0xfe, 0x17, 0x46, 0x3e,
	0x8e, 0xec, 0x1a, 0xf7, 0x5f, 0x56, 0xfe, 0x0f, 0x73, 0x9b, 0xab, 0x3b, 0xc2, 0x3e, 0x98, 0xf7,
	0x46, 0x01, 0x26, 0xc9, 0xbe, 0x6f, 0xd7, 0x07, 0xd6, 0x56, 0xdd, 0x55, 0x32, 0x5c, 0x07, 0xcd,
	0x30, 0xa2, 0x27, 0xd8, 0x63, 0xc6, 0x19, 0x6e, 0xcc, 0x15, 0xcc, 0x1a, 0x27, 0xd4, 0x7b, 0x7c,
	0x87, 0xfa, 0xd8, 0x9e, 0x1d, 0x58, 0x5b, 0x4d, 0x37, 0x57, 0x40, 0x9b, 0x8d, 0x7d, 0x84, 0x88,
	0x87, 0xed, 0xc6, 0xc0, 0xda, 0xb2, 0xdc, 0x4c, 0x84, 0x1b, 0x00, 0x78, 0xc7, 0x28, 0x1a, 0xe2,
	0x87, 0x67, 0x21, 0xb6, 0xe7, 0xf8, 0x1f, 0x35, 0x8d, 0xf3, 0x49, 0x0d, 0x74, 0x32, 0x20, 0x76,
	0xc3, 0x70, 0x74, 0x76, 0x71, 0xa1, 0xf8, 0xb8, 0x06, 0xba, 0x19, 0x14, 0x2e, 0xf6, 0x31, 0x1e,
	0xbf, 0xeb, 0x58, 0xac, 0x82, 0x06, 0x1a, 0xd3, 0x94, 0x24, 0x12, 0x0a, 0x29, 0x31, 0x24, 0xf0,
	0x33, 0x0f, 0x63, 0x7f, 0x6f, 0x84, 0x86, 0x19, 0x12, 0xb9, 0xc6, 0xf9, 0xce, 0x02, 0xbd, 0x0c,
	0x89, 0x47, 0x41, 0x72, 0xec, 0x47, 0xe8, 0xe9, 0x3b, 0x81, 0x05, 0x26, 0x49, 0x94, 0xc6, 0xcc,
	0x2a, 0xb1, 0x50, 0x0a, 0xe7, 0x73, 0xad, 0xd0, 0x1f, 0x46, 0x88, 0xc4, 0x17, 0x74, 0x71, 0x59,
	0xd4, 0x84, 0xcd, 0x9f, 0x47, 0x9d, 0x17, 0x51, 0x95, 0xc2, 0x39, 0xce, 0x57, 0xfe, 0xae, 0xc0,
	0xce, 0xc5, 0x71, 0x08, 0x6f, 0x01, 0x10, 0xe1, 0x38, 0x7c, 0x90, 0xa0, 0x24, 0x8d, 0x25, 0x56,
	0x3d, 0x35, 0x77, 0x57, 0x99, 0x5c, 0xcd, 0xcd, 0x5c, 0x90, 0x5a, 0x71, 0x41, 0xbe, 0xd0, 0xda,
	0x6d, 0xd7, 0x3f, 0xbd, 0xc8, 0x2c, 0xcc, 0x46, 0x74, 0x4c, 0x43, 0xfc, 0x4f, 0x94, 0x88, 0x25,
	0xa9, 0xbb, 0x4a, 0x76, 0xbe, 0xac, 0xe5, 0x4b, 0xb2, 0xeb, 0x9f, 0x5e, 0x6c, 0x92, 0x9e, 0x88,
	0xd4, 0x8b, 0x1a, 0x58, 0xd6, 0x90, 0xba, 0xd0, 0x1c, 0x3e, 0x11, 0xa8, 0x6f, 0xcc, 0x92, 0xfa,
	0x83, 0x0e, 0x5f, 0x45, 0x87, 0x06, 0x8a, 0xcd, 0x02, 0x8a, 0x2f, 0x2d, 0xb0, 0xaa, 0xa1, 0xf8,
	0x7b, 0xd9, 0x28, 0xbf, 0xae, 0x81, 0xee, 0x7f, 0x53, 0x1c, 0x9d, 0xdd, 0xdb, 0x53, 0x3b, 0xc0,
	0xf9, 0x66, 0xf4, 0x37, 0x30, 0x1f, 0xa2, 0x21, 0xde, 0x27, 0x47, 0x54, 0x4e, 0xa7, 0xab, 0x9c,
	0xef, 0x4b, 0x83, 0xab, 0x5c, 0x7e, 0xc5, 0x44, 0x56, 0x41, 0x23, 0x16, 0x3b, 0x92, 0x98, 0x85,
	0x94, 0xa0, 0x03, 0x16, 0x0e, 0xd3, 0x38, 0x20, 0x38, 0x8e, 0xf9, 0xaa, 0x37, 0xb8, 0xd5, 0xd0,
	0xc1, 0x4d, 0xd0, 0x96, 0x73, 0x96, 0x9b, 0x9a, 0x28, 0x0d, 0x53, 0xc9, 0xf2, 0x1f, 0xe2, 0x61,
	0x40, 0x54, 0x1b, 0x35, 0xdd, 0x5c, 0xc1, 0x68, 0x0c, 0x13, 0x5f, 0x15, 0x47, 0xd3, 0xcd, 0x44,
	0xe7, 0xdb, 0x26, 0x68, 0x2a, 0xfc, 0xe0, 0x22, 0xa8, 0x05, 0x3e, 0xc7, 0xad, 0xe9, 0xd6, 0x02,
	0x3e, 0xee, 0x13, 0x1a, 0x90, 0x03, 0x2a, 0x77, 0x45, 0x29, 0xb1, 0x71, 0xd3, 0x10, 0x47, 0x28,
	0xa1, 0x11, 0xa7, 0xbf, 0xba, 0x18, 0xb7, 0xae, 0x63, 0x68, 0x65, 0x32, 0x07, 0xa4, 0xe9, 0x2a,
	0x99, 0xd7, 0xba, 0x48, 0xf9, 0x08, 0x9d, 0x49, 0x4c, 0x34, 0x8d, 0x89, 0x66, 0xa3, 0x88, 0xa6,
	0xbe, 0x0e, 0x73, 0x85, 0x75, 0xd8, 0x04, 0x6d, 0x76, 0xe5, 0xda, 0xf5, 0x3c, 0xd6, 0x54, 0xfb,
	0xbe, 0xa4, 0x14, 0x53, 0x09, 0x97, 0xc1, 0x2c, 0x7e, 0x96, 0x1c, 0x50, 0x89, 0x86, 0x10, 0xb4,
	0x72, 0x3b, 0xa0, 0x36, 0x30, 0xca, 0xed, 0x80, 0xaf, 0x3e, 0x8d, 0x82, 0x61, 0x40, 0xf6, 0x7d,
	0xbb, 0x25, 0xe7, 0x23, 0x65, 0x66, 0x0b, 0x48, 0x90, 0x70, 0x80, 0x17, 0xc4, 0x88, 0x32, 0xd9,
	0xe8, 0xcc, 0xb6, 0xd9, 0x99, 0xcc, 0xe6, 0x63, 0x34, 0xe2, 0xb6, 0x45, 0x61, 0xcb, 0x64, 0x38,
	0x00, 0x2d, 0x99, 0x9c, 0x9b, 0x97, 0xb8, 0x59, 0x57, 0xb1, 0x55, 0x78, 0x2a, 0x7b, 0x99, 0xbb,
	0x74, 0xb8, 0x8b, 0xa1, 0x63, 0x51, 0x8e, 0x02, 0xc2, 0x76, 0x2c, 0xbe, 0x50, 0x5d, 0x3e, 0x70,
	0x5d, 0x55, 0xaa, 0x41, 0x58, 0x51, 0x83, 0xeb, 0xa0, 0x39, 0xa6, 0x04, 0x9f, 0xf1, 0x18, 0x3d,
	0x81, 0x8c, 0x52, 0xb0, 0x08, 0xf8, 0x99, 0x77, 0x8c, 0x88, 0xdc, 0x0c, 0x97, 0x45, 0x04, 0x5d,
	0xa7, 0x38, 0x91, 0x3b, 0xac, 0x68, 0x9c, 0x68, 0x58, 0x39, 0xb7, 0xad, 0x16, 0x19, 0x33, 0xb3,
	0x1e, 0xa0, 0x31, 0xb6, 0xd7, 0x34, 0x2b, 0x53, 0xf0, 0x19, 0xa6, 0xc4, 0xbf, 0x43, 0xc7, 0x21,
	0x22, 0x67, 0xb6, 0x2d, 0x67, 0x98, 0xab, 0x4c, 0xe6, 0xbc, 0x54, 0x64, 0xce, 0x1c, 0x67, 0x3e,
	0xb6, 0xbe, 0xf8, 0xbf, 0xa6, 0xd2, 0x3a, 0x70, 0x57, 0x10, 0xf7, 0x65, 0x4e, 0xdc, 0xa6, 0x92,
	0xa3, 0x20, 0x14, 0xf7, 0xa3, 0xc0, 0xc3, 0xf6, 0x3a, 0x77, 0x32, 0x74, 0xf0, 0x3a, 0x58, 0x94,
	0xf2, 0x6d, 0x79, 0xaa, 0xb8, 0xc2, 0xbd, 0x0a, 0xda, 0x72, 0xcf, 0x6f, 0x54, 0xf5, 0xfc, 0x06,
	0x00, 0xac, 0x5a, 0xe4, 0xa0, 0xae, 0xf2, 0x48, 0x9a, 0x86, 0xcd, 0x9b, 0x49, 0x62, 0x38, 0x03,
	0x6e, 0xce, 0x15, 0x6c, 0xde, 0x4c, 0xc8, 0x06, 0xf2, 0x27, 0x6e, 0xd7, 0x55, 0xbc, 0x97, 0x22,
	0xfa, 0x01, 0x26, 0x99, 0x8f, 0x23, 0xe6, 0x6d, 0x28, 0x59, 0x0d, 0x73, 0xb6, 0xdf, 0xc3, 0xd8,
	0xfe, 0x33, 0x77, 0x50, 0x72, 0x61, 0x4f, 0xdb, 0x2c, 0xed, 0x69, 0xe6, 0x21, 0xea, 0x5a, 0xe9,
	0x10, 0x95, 0xf3, 0xe6, 0xf5, 0x81, 0xb5, 0x35, 0xab, 0x78, 0x73, 0x15, 0x34, 0x22, 0x3c, 0x46,
	0xd1, 0x63, 0xfb, 0x2f, 0x82, 0x97, 0x84, 0xe4, 0x7c, 0x6a, 0x81, 0xee, 0x7f, 0x82, 0x38, 0xd1,
	0x76, 0x84, 0x5f, 0x7a, 0x27, 0xb8, 0x06, 0x66, 0x18, 0xf1, 0xbf, 0x7a, 0x5f, 0xe0, 0x66, 0x78,
	0x1d, 0xcc, 0xf8, 0x28, 0x41, 0x76, 0x7d, 0x50, 0xdf, 0x6a, 0xdd, 0x84, 0xca, 0x2d, 0x1f, 0x01,
	0xb7, 0x3b, 0x2f, 0x2c, 0xb0, 0x24, 0x37, 0xab, 0x07, 0xac, 0x74, 0xdf, 0xd6, 0xad, 0xca, 0xf9,
	0x71, 0x06, 0xcc, 0xc9, 0x31, 0x9a, 0x9e, 0xd6, 0x24, 0x1a, 0xae, 0x4d, 0xa3, 0xe1, 0x7a, 0x15,
	0x0d, 0xeb, 0xb4, 0x39, 0x53, 0xa0, 0xcd, 0x42, 0x5b, 0xcf, 0x96, 0xdb, 0xba, 0x48, 0x3b, 0x8d,
	0x69, 0xb4, 0x33, 0x37, 0x91, 0x76, 0xe6, 0x27, 0xd2, 0x4e, 0xb3, 0x48, 0x3b, 0x06, 0x25, 0x82,
	0x22, 0x25, 0x9a, 0x85, 0xdd, 0x2a, 0x15, 0xf6, 0x26, 0x68, 0x7b, 0x69, 0x14, 0x61, 0x92, 0x51,
	0xca, 0x82, 0x68, 0x2d, 0x43, 0xc9, 0x66, 0x28, 0x7a, 0x4d, 0x3a, 0xb5, 0x05, 0xa5, 0xe8, 0x3a,
	0x41, 0x3b, 0xe8, 0x70, 0x84, 0xa5, 0xcf, 0x62, 0x46, 0x3b, 0xb9, 0x8e, 0x61, 0xc9, 0xda, 0x03,
	0x27, 0xff, 0x43, 0xa3, 0x54, 0x6c, 0x25, 0x96, 0xab, 0xab, 0xd8, 0x6c, 0x3c, 0x9a, 0x31, 0x57,
	0x47, 0x50, 0x85, 0x52, 0xc0, 0x0e, 0xa8, 0x13, 0x74, 0xca, 0x37, 0x0f, 0xcb, 0x65, 0x3f, 0xb5,
	0x06, 0x84, 0x7a, 0x03, 0xb2, 0x83, 0xc6, 0x29, 0x8e, 0xe2, 0x80, 0x12, 0xbe, 0x4d, 0xd4, 0xdd,
	0x4c, 0x64, 0x6b, 0x9d, 0x86, 0x3e, 0x4a, 0xf0, 0x6e, 0xc2, 0x37, 0x88, 0xba, 0xab, 0x64, 0xe7,
	0xb9, 0x05, 0x96, 0x44, 0xdb, 0xca, 0xde, 0x78, 0xc3, 0x4d, 0xbb, 0x69, 0x34, 0x6d, 0x47, 0x6b,
	0x5a, 0x91, 0x5f, 0xb4, 0xec, 0x57, 0x16, 0xe8, 0xe9, 0x2d, 0xfb, 0x6f, 0x9a, 0x46, 0x6f, 0x6d,
	0xdb, 0xfe, 0x34, 0x0b, 0x5a, 0xda, 0x38, 0x7f, 0xd3, 0xd6, 0x55, 0xa7, 0xab, 0x59, 0xfd, 0x74,
	0x55, 0x38, 0x89, 0x34, 0xa6, 0x9f, 0x44, 0xe6, 0x2a, 0x4e, 0x22, 0x1d, 0x50, 0x8f, 0x23, 0x4f,
	0x36, 0x2b, 0xfb, 0x59, 0x24, 0x8a, 0xe6, 0x74, 0xa2, 0x00, 0xd3, 0x88, 0xa2, 0x35, 0x91, 0x28,
	0x16, 0x26, 0x12, 0x45, 0x7b, 0x22, 0x51, 0x2c, 0x16, 0x89, 0x62, 0x1b, 0x40, 0xea, 0x79, 0x69,
	0x74, 0xc7, 0x60, 0x03, 0xd1, 0xa1, 0x15, 0x16, 0xf8, 0x57, 0xd0, 0x0d, 0x69, 0x9c, 0x98, 0xee,
	0xa2, 0x61, 0xcb, 0x06, 0xe6, 0xcd, 0x63, 0xec, 0xe9, 0x2c, 0x22, 0xda, 0xb8, 0x6c, 0x80, 0x37,
	0x40, 0x87, 0x85, 0x30, 0x9c, 0x21, 0x77, 0x2e, 0xe9, 0x55, 0xe4, 0xbb, 0x3a, 0xf7, 0xf4, 0xb4,
	0xc8, 0xba, 0x21, 0x8b, 0x6c, 0x38, 0x2f, 0xe7, 0x91, 0x0d, 0xdf, 0x9c, 0x5a, 0x56, 0x0c, 0x6a,
	0x61, 0x35, 0x1b, 0x61, 0x41, 0x20, 0xab, 0xb2, 0x66, 0xa5, 0xec, 0x7c, 0x66, 0x81, 0x9e, 0x46,
	0x20, 0xa2, 0x53, 0xdf, 0x30, 0x89, 0x6c, 0x19, 0x24, 0xb2, 0x5c, 0x24, 0x11, 0x3e, 0x06, 0xee,
	0x71, 0xf3, 0x25, 0x00, 0xf3, 0xd9, 0xfd, 0x1b, 0xfe, 0x1f, 0xb4, 0xb4, 0xef, 0x39, 0x70, 0x2d,
	0xff, 0x9f, 0xf1, 0x95, 0xa7, 0xbf, 0x5e, 0x32, 0x68, 0x47, 0x1a, 0x67, 0xe5, 0xc3, 0xef, 0x7f,
	0x78, 0x5e, 0x5b, 0x72, 0xc0, 0x0e, 0x65, 0x95, 0xbe, 0x13, 0xa7, 0x87, 0xff, 0xb0, 0x6e, 0x40,
	0x04, 0xda, 0xc6, 0x37, 0x12, 0x78, 0xa9, 0x14, 0x25, 0x7b, 0x96, 0x9b, 0x92, 0x60, 0x8d, 0x27,
	0xe8, 0x3a, 0x0b, 0x32, 0x01, 0x62, 0x7f, 0x63, 0x29, 0xfc, 0xfc, 0x7b, 0x94, 0x78, 0xb7, 0x82,
	0xfd, 0x52, 0x20, 0xf5, 0xa0, 0x35, 0x25, 0x89, 0xcd, 0x93, 0x40, 0xa7, 0x2d, 0x93, 0x44, 0xfc,
	0x7f, 0x2c, 0xcb, 0x49, 0xfe, 0x06, 0x9e, 0x3d, 0x57, 0xc0, 0x72, 0x2c, 0xed, 0x25, 0x63, 0x4a,
	0xa6, 0x3e, 0xcf, 0xb4, 0xec, 0x2c, 0xc9, 0x4c, 0xd9, 0x1d, 0xa9, 0x00, 0x1a, 0x7f, 0x60, 0xaa,
	0x00, 0x2d, 0x7b, 0x78, 0x3a, 0x27, 0x68, 0xfc, 0x92, 0x51, 0x00, 0x4d, 0xbc, 0x20, 0x57, 0x80,
	0xa6, 0x9e, 0x96, 0xcf, 0x09, 0x1a, 0xf2, 0x4f, 0xe5, 0xea, 0x6b, 0xa0, 0x65, 0xef, 0xaf, 0x15,
	0xa0, 0x69, 0x4f, 0xb3, 0xe7, 0x04, 0x0d, 0xf9, 0xa7, 0xaa, 0x0c, 0xc6, 0xc6, 0x9b, 0xb8, 0xac,
	0x84, 0x2b, 0x55, 0xc9, 0x5e, 0xb7, 0x18, 0x2e, 0xf3, 0x6c, 0x2b, 0x4e, 0x27, 0xcf, 0x56, 0x59,
	0x0f, 0xd9, 0x3b, 0x60, 0xf5, 0xd4, 0x5e, 0x73, 0xa5, 0x2a, 0xa6, 0xa6, 0x16, 0x2b, 0x36, 0xde,
	0x1c, 0x55, 0xf9, 0x5d, 0xad, 0x4a, 0xf7, 0xfa, 0x15, 0x78, 0x85, 0x67, 0x5c, 0x73, 0x60, 0x9e,
	0x51, 0x2f, 0x42, 0x1f, 0xb4, 0x8d, 0x8b, 0x8b, 0x56, 0x20, 0xa5, 0x37, 0xae, 0x7e, 0x6e, 0x2b,
	0x5d, 0x76, 0x32, 0x18, 0x61, 0x4f, 0xe6, 0x91, 0x57, 0xc6, 0x9d, 0x51, 0x10, 0x27, 0xf0, 0x3d,
	0xd0, 0xd2, 0x68, 0x12, 0xda, 0xc5, 0x1c, 0xd9, 0xd5, 0xa4, 0x6f, 0x17, 0x32, 0xa8, 0x73, 0x99,
	0x73, 0x89, 0xc7, 0xef, 0xc1, 0x6e, 0xc6, 0x3c, 0xcc, 0x22, 0xa2, 0x8f, 0x8d, 0x53, 0x9c, 0x38,
	0x86, 0x54, 0x66, 0x90, 0x27, 0x29, 0x0d, 0xb1, 0x0a, 0xf2, 0x76, 0x36, 0x78, 0x26, 0x1b, 0xae,
	0x1a, 0x99, 0x4e, 0x68, 0x1a, 0xf1, 0x74, 0xb7, 0xd7, 0xc0, 0x8a, 0x47, 0xc7, 0xdb, 0xc3, 0xa3,
	0xed, 0x53, 0xb4, 0xcd, 0x82, 0xc8, 0x60, 0x87, 0x0d, 0xfe, 0xe9, 0xfc, 0xd6, 0xcf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x7f, 0x6c, 0xd4, 0x43, 0x82, 0x1f, 0x00, 0x00,
}
